#!/bin/bash
#####---------------------  说明  ---------------------------#########
# 默认规划中，不可在此文件中出现，不被函数包裹的调用，定义
# 人话，这里只放函数
#####---------------------工具函数---------------------------#########
ftKillPhoneAppByPackageName()
{
	local ftName=根据应用包名杀死应用
	local packageName=$1

	#使用示例
	while true; do case "$1" in    h | H |-h | -H) cat<<EOF
	#=================== ${ftName}的使用示例=============
	#
	#	ftKillPhoneAppByPackageName [packageName]
	#	ftKillPhoneAppByPackageName com.android.settings
	#=========================================================
EOF
	exit;; * )break;; esac;done

	#耦合变量校验
	local valCount=1
	if [ $# -ne $valCount ]||[ -z "$packageName" ];then
		  ftEcho -e "函数[${ftName}]参数错误，请查看函数使用示例"
		  ftKillPhoneAppByPackageName -h
	fi

	#adb状态检测
	adbStatus=`adb get-state`
	if [ $adbStatus = "device" ];then
		#确定包存在
		if [ -n "$(adb shell pm list packages|grep $packageName)" ];then
			adb root
			adb remount
			pid=`adb shell ps | grep $packageName | awk '{print $2}'`
			#pid=`adb shell "ps" | awk '/com.android.systemui/{print $2}'`
			adb shell kill $pid
		else
			ftEcho -e 包名[${packageName}]不存在，请确认
		fi
	else
		ftEcho -e adb状态异常,请重新尝试
	fi
}

ftRestartadb()
{
	#耦合变量校验
	local valCount=0
	if [ $# -ne $valCount ]||[ -z "$mUserPwd" ];then
		  ftEcho -ex "函数[${ftName}]参数错误"
	fi

	local ftName=重启adb sever
	echo $mUserPwd | sudo -S adb kill-server
	echo
	sleep 2
	echo $mUserPwd | sudo -S adb start-server
	echo server-start
	adb devices
}

ftCleanDataGarbage()
{
	local ftName=清空回收站
	dirDevsArray=(
			/media/data_self \
			/home/${mUserName} \
			)

	for dirDev in ${dirDevsArray[*]}
	do
	dir=null
	if [ -d ${dirDev}/.Trash-1000 ];then
		dir=${dirDev}/.Trash-1000
	else
		if [ -d ${dirDev}/.local/share/Trash ];then
			dir=${dirDev}/.local/share/Trash
		fi
	fi

	if [ -d $dir ];then
		cd $dir
		if [ ! -d empty ];then
			mkdir empty
		fi
		rsync --delete-before -d -a -H -v --progress --stats empty/ files/
		rm -rf files/*
		fi
	done
}

ftMtkFlashTool()
{
	local ftName=mtk下载工具
	local tempDirPath=`pwd`
	local toolDirPath=${mRoDirPathTools}sp_flash_tool_v5.1548

	#耦合变量校验
	local valCount=0
	if [ $# -ne $valCount ]||[ -z "$tempDirPath" ]\
			         ||[ -z "$mRoDirPathTools" ];then
		  ftEcho -ex "函数[${ftName}]参数错误"
	fi

	cd $toolDirPath&&
	echo "$mUserPwd" | sudo -S ./flash_tool&&
	cd $tempDirPath
}

ftFileDirEdit()
{
	local ftName=路径合法性校验
	type=$1
	isCreate=$2
	path=$3

	#使用示例
	while true; do case "$1" in    h | H |-h | -H) cat<<EOF
#=================== ${ftName}的使用示例===================
#
#	ftFileDirEdit [type] [isCreate] [path]
#
#	文件存在，创建返回1
#	ftFileDirEdit -f true /home/xian-hp-u16/cmds/test.sh
#
#	文件夹存在，创建返回1
#	ftFileDirEdit -d true /home/xian-hp-u16/cmds/test.sh
#
#	判断文件夹是否为空，空，返回2 非空，返回3,非文件夹，返回4
#	ftFileDirEdit -e false /home/xian-hp-u16/cmds
#	echo $?
#===============================================================
EOF
	exit;; * )break;; esac;done

	#耦合变量校验
	local valCount=3
	if [ $# -ne $valCount ]||[ -z "$type" ]\
					         ||[ -z "$isCreate" ]\
					         ||[ -z "$path" ];then
		  ftEcho -e "函数[${ftName}]参数错误，请查看函数使用示例"
		  ftFileDirEdit -h
	fi

	while true; do
	case "$type" in
		e | E | -e | -E )
			if [ ! -d $path ]; then
			     return 4
			fi
			files=`ls $path`
			if [ -z "$files" ]; then
			     return 2
			else
			     return 3
			fi
			break;;
		f | F | -f | -F )
			if [ -f $path ];then
				return 1
			elif [ $isCreate = "true" ];then
				touch $path
				return 1
			else
				return 0
			fi
			break;;
		d | D)
			if [ -d $path ];then
				return 1
			elif [ $isCreate = "true" ];then
				mkdir -p $path
				return 1
			else
				return 0
			fi
			break;;
		* )  
			ftEcho -e "函数[${ftName}]参数错误，请查看函数使用示例"
			ftFileDirEdit -h
			;;
	esac
	done
}
ftDebug()
{
	local ftName=调试用，实时跟踪变量变化

	#使用示例
	while true; do case "$1" in    h | H |-h | -H) cat<<EOF
	#=================== ${ftName}的使用示例===================
	#
	#	 trap 'echo “行:$LINENO, a=$a,b=$b,c=$c”' DEBUG
	#	 根据需要修改 a，b，c
	#	mRoIsDebug设为true
	#	 ftDebug [任意命令]
	#	 ftDebug echo test
	#=========================================================
EOF
	exit;; * )break;; esac;done

	#耦合变量校验
	if [ -z "$mRoIsDebug" ];then
		  ftEcho -ex "函数[${ftName}]参数错误，请查看函数使用示例"
	fi

	 if [ "$mRoIsDebug" = "true" ]; then
		$@
		trap 'echo “行:$LINENO, mRoBaseShellParameter2=$mRoBaseShellParameter2,\
	 			 commandAuthority=$commandAuthority,\
	 			 XCMD=$XCMD”' DEBUG
	 else
	 	ftEcho -ex 当前非调试模式
	fi

}

ftEcho()
{
#=================== example=============================
#
#	 ftEcho [option] [Content]
#	 ftEcho e 错误的选择1
#	\033[47;30m  47背景色配置 30前景色配置
#=========================================================
	local ftName=工具信息提示
	option=$1
	Content=$2
	while true; do
	case $option in
	#错误信息显示
	e | E | -e | -E)	echo -e "\033[1;31m$Content\033[0m"; break;;
	#错误信息显示，显示退出
	ex | EX | -ex | -EX)	echo -e "\033[1;31m$Content\033[0m"; exit;;
	#执行信息
	s | S | -s | -S)	echo;echo -e "\033[42;37m$Content\033[0m"; break;;
	# 标题，不换行
	t | T | -t | -T)	echo -e "\e[41;33;1m =========== $Content ============= \e[0m"; break;;
	# 标题，换行
	b | B | -b | -B)	echo;echo -e "\e[41;33;1m =========== $Content ============= \e[0m";echo; break;;
	#特定信息显示,y/n
	y | Y | -y | -Y)	echo -en "${Content}[y/n]"; break;;
	# 特定信息显示,命令说明的格式
	g | G | -g | -G)cat<<EOF
=========================================================================
命令	--- 参数/命令说明
	|// 使用格式
	|-- 参数	 ---------------- [参数权限] ----	参数说明
=========================================================================
EOF
break;;
	* ) echo $option ;break;;
	esac
	done
}

ftTiming()
{
	local ftName=脚本操作耗时记录

	if [ -z "$mTimingStart" ];then
		mTimingStart=$(date +%s -d $(date +"%H:%M:%S"))
		return 0;
	fi

	 #时间少于1秒默认不显示操作耗时
	 #时间时分秒各单位不显示为零的结果
	time2=$(date +%s -d $(date +"%H:%M:%S"))
	time3=$(((time2-mTimingStart)%60))
	time5=$(((time2-mTimingStart)/3600))
	time4=$((((time2-mTimingStart)-time5*3600)/60))

	if [ "$time5" -ne "0" ];then
		strS1=$time5时
	else
		strS1=""
	fi
	if [ "$time4" -ne "0" ];then
		strF1=$time4分
	else
		strF1=""
	fi
	if [ "$time3" -ne "0" ];then
		strM1=$time3秒
	else
		strM1=""
	fi
	if [ "$time3" -eq "0" ]&&[ "$time4" -eq "0" ] &&[ "$time5" -eq "0" ];then
		ftEcho -s 1秒没到就结束了
	else
		 ftEcho -s "本技能耗时${strS1}${strF1}${strM1}  !"
	fi
	mTimingStart=
}


ftBootAnimation()
{
	local ftName=生成开关机动画
	local typeEdit=$1
	local dirPathAnimation=$2
	local dirPathBase=$(pwd)

	#使用示例
	while true; do case "$1" in    h | H |-h | -H) cat<<EOF
#=================== 函数${ftName}的使用示例============
#
#	ftBootAnimation [edittype] [path]
#	生成bootanimation2.zip,进入已new处理或解压的文件夹后可运行
#	ftBootAnimation create /home/xxxx/test/bootanimation2
#	初始化生成bootanimation2.zip所需要的东东，然后生成动画包
#	ftBootAnimation new /home/xxxx/test/bootanimation2
#============================================================
EOF
	exit;; * )break;; esac;done

	#耦合变量校验
	local valCount=2
	if [ $# -ne $valCount ]||[ -z "$dirPathAnimation" ];then
		ftEcho -e "函数[${ftName}]参数错误，请查看函数使用示例"
		ftBootAnimation -h
	fi

	while true; do case "$typeEdit" in
	create)
		#默认运行前提环境
		#所在文件夹为动画包解压生成的，也就是该参数默认只能重新打包
		local dirNamePackageName=${dirPathAnimation##*/}.zip
		local fileConfig=`ls $dirPathAnimation|grep '.txt'`

		echo -en "请输入动画包的包名(回车默认animation):"
		read customPackageName
		if [ ${#customPackageName} != 0 ];then
			dirNamePackageName=${customPackageName}.zip
		fi

		if [ -z "$dirNamePackageName" ]||[ -z "$fileConfig" ];then
			ftEcho -e "函数[${ftName}]运行出现错误，请查看函数"
			echo dirNamePackageName=$dirNamePackageName
			echo fileConfig=$fileConfig
		fi

		cd $dirPathAnimation
		zip -r -0 ${dirNamePackageName} */* ${fileConfig} >/dev/null
		cd $dirPathBase

		while true; do
		ftEcho -y 已生成${dirNamePackageName}，是否清尾
		read -n1 sel
		case "$sel" in
			y | Y )
				mv ${dirPathAnimation}/${dirNamePackageName} /home/${mRoNameUser}/${dirNamePackageName}&&
				rm -rf $dirPathAnimation
				break;;
			n | N| q |Q)  exit;;
			* )   
				ftEcho -e 错误的选择：$sel
				echo "输入n，q，离开"
				;;
		esac
		done
		break;;
	new)
		local dirNamePart0=part0
		local dirNamePart1=part1
		local fileNameDesc=desc.txt
		local fileNameLast
		local dirNameAnimation=animation

		dirPathAnimationSourceRes=$dirPathAnimation

		ftFileDirEdit -e false $dirPathAnimationSourceRes
		if [ $? -eq "2" ];then
			ftEcho -ex 空的动画资源，请确认[${dirPathAnimationSourceRes}]是否存在动画文件
		fi

		dirPathAnimationTraget=/home/${mRoNameUser}/${dirNameAnimation}

		ftFileDirEdit -e false $dirPathAnimationTraget
		if [ -d $dirPathAnimationTraget ]||[ $? -eq   "3" ];then		
			while true; do
			ftEcho -y ${ftName}的目标文件[${dirPathAnimationTraget}]夹非空，是否删除重建
			read -n1 sel
			case "$sel" in
				y|Y)
					rm -rf $dirPathAnimationTraget
					break;;
				n|N|q|Q)  exit;;
				*)   
					ftEcho -e 错误的选择：$sel
					echo "输入n，q，离开"
					;;
			esac
			done
		fi
		mkdir  -p ${dirPathAnimationTraget}/${dirNamePart0}
		mkdir	  ${dirPathAnimationTraget}/${dirNamePart1}
		touch  ${dirPathAnimationTraget}/${fileNameDesc}

		cd $dirPathAnimationSourceRes
		filelist=`ls $dirPathAnimationSourceRes`
		#文件名去空格
		for loop in `ls -1 | tr ' '  '#'`
		 do
		    mv  "`echo $loop | sed 's/#/ /g' `"  "`echo $loop |sed 's/#//g' `"  2> /dev/null
		done

		file1=${filelist[0]}
		if [ ${file1##*.} != "jpg" ]&&[ ${file1##*.} != "jpg" ];then
			ftEcho -e 特殊格式[${file1##*.}]动画资源文件，生成包大小可能异常
		fi

		#文件重命名
		index=0
		for file in $filelist
		do
			# echo “filename: ${file%.*}”
			# echo “extension: ${file##*.}”
			a=$((1000+$index))
			# 重命名图片，复制到part0
			fileNameLast=${a:1}.${file##*.}
			cp  $file  ${dirPathAnimationTraget}/${dirNamePart0}/${fileNameLast}
			index=`expr $index + 1`
		done
		# 复制最后一张图片到part1
		cp  ${dirPathAnimationTraget}/${dirNamePart0}/${fileNameLast} ${dirPathAnimationTraget}/${dirNamePart1}/${fileNameLast}
		
		# 输入分辨率,输入帧率,循环次数
		# 480           250   	15
		# 图片的宽    图片的高   每秒显示的帧数
		# p            	1        	0			part0
		# 标识符    循环的次数  阶段切换间隔时间 对应图片的目录
		# p 			0 			10 			part1
		# 标识符    循环的次数  阶段切换间隔时间 对应图片的目录
		local resolutionWidth=0
		local resolutionHeight=0
		local frameRate=0
		local cycleCount=0
		while [ -z "$resolutionWidth" ]||\
			  [ -z "$resolutionHeight" ]||\
			  [ -z "$frameRate" ]||\
			  [ -z "$cycleCount" ]; do

			  	if [ -z "$resolutionWidth" ];then
					echo -en 请输入动画的宽，用于计算分辨率:
					read resolutionWidth
					input=$resolutionWidth
			  	elif [ -z "$resolutionHeight" ]; then
					echo -en 请输入动画的高，用于计算分辨率:
					read resolutionHeight
					input=$resolutionWidth
			  	elif [ -z "$frameRate" ]; then
					echo -en 请输入动画的帧率:
					read frameRate
					input=$frameRate
			  	elif [ -z "$cycleCount" ]; then
					echo -en 请输入动画的循环次数:
					read cycleCount
					input=$cycleCount
				fi
		done

		#生成desc.txt
		echo -e "$resolutionWidth $resolutionHeight $frameRate\n\
p $cycleCount 0 part0\n\
p 0 0 part1" >${dirPathAnimationTraget}/${fileNameDesc}
		
		# 生成动画包
		ftBootAnimation create $dirPathAnimationTraget
		break;;
	 * )	
		ftEcho -e "函数[${ftName}]参数错误，请查看函数使用示例"
		ftBootAnimation -h;; esac;done
}