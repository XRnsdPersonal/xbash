#!/bin/bash
#####---------------------  说明  ---------------------------#########
# 不可在此文件中出现不被函数包裹的调用或定义
# 人话，这里只放函数

ftRestoreOperate()
{
    local ftEffect=根据备份包还原系统

    while true; do case "$1" in
    -h | --help) cat<<EOF
#===================[   ${ftEffect}   ]的使用示例==============
#
#    ftRestoreOperate -pm 工具数据库路径 -t 默认tag名 -d 还原的目标路径
#=========================================================
EOF
    return ;;
    * ) break;;esac;done

    #参数解析
    local filePathIniMaintain
    local tagNameMaintain
    local dirPathRestoreTarget

    local arg ; local arg2 ; local index ; for ((i=1;i<=$#;i++)) ; do
    eval value=\${${i}} ; arg=${value} ; ((index=i+1)) ; eval value2=\${${index}} ; arg2=${value2} ; case "${arg}" in
            -pm )   filePathIniMaintain="${arg2}"
           ;;
            -t )   tagNameMaintain="${arg2}"
           ;;
            -d )   dirPathRestoreTarget="${arg2}"
           ;;
    * ) [[ -z "${arg}" ]] &&  break ;; esac;done
    #耦合校验
    local errorContent=
    [ ! -f "$filePathIniMaintain" ] && errorContent="${errorContent}\\n[工具数据库文件不存在]filePathIniMaintain=$filePathIniMaintain"
    [ ! -d "$dirPathRestoreTarget" ] && errorContent="${errorContent}\\n[还原的目标路径不存在]dirPathRestoreTarget=$dirPathRestoreTarget"
    [ -z "$tagNameMaintain" ] && errorContent="${errorContent}\\n[默认tag名为空]tagNameMaintain=$tagNameMaintain"
    [ ! -z "$errorContent" ] && ftEcho -ea "函数[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftRestoreOperate -h && return

    while true; do
    ftEcho -y 是否开始还原
    read -n 1 sel
    case "$sel" in
        y | Y )
            local fileName=$(ftIniGetValue $filePathVersionInfoMaintain $tagNaeMaintain fileName)
            local dirPathStore=$(ftIniGetValue $filePathVersionInfoMaintain $tagNaeMaintain dirPathStore)
            local dirPathRestoreExclude=$(ftIniGetValue $filePathIniMaintain $tagNameMaintain dirPathRestoreExclude)
            local filePathVersion=${dirPathStore}/${fileName}

            if [ ! -f $filePathVersion ];then
                ftEcho -e 未找到备份包:${filePathVersion}
                return
            fi
            sudo tar --use-compress-program=pigz -xvpf $filePathVersion --exclude=$dirPathRestoreExclude -C /
            break;;
        n | N | q |Q)  exit;;
        * ) ftEcho -e 错误的选择：$sel
            echo "输入n，q，离开";;
    esac
    done
}

ftRestoreChoiceSource()
{
    local ftEffect=选择还原使用的版本[备份]包

    while true; do case "$1" in
    -h | --help) cat<<EOF
#===================[   ${ftEffect}   ]的使用示例==============
#
#    ftRestoreChoiceSource -p 版本数据库路径 -pm 工具数据库路径 -t 默认tag名
#=========================================================
EOF
    return ;;
    * ) break;;esac;done

    #参数解析
    local filePathIni
    local filePathIniMaintain
    local tagNameMaintain

    local arg ; local arg2 ; local index ; for ((i=1;i<=$#;i++)) ; do
    eval value=\${${i}} ; arg=${value} ; ((index=i+1)) ; eval value2=\${${index}} ; arg2=${value2} ; case "${arg}" in
            -p )   filePathIni="${arg2}"
           ;;
            -pm )   filePathIniMaintain="${arg2}"
           ;;
            -t )   tagNameMaintain="${arg2}"
           ;;
    * ) [[ -z "${arg}" ]] &&  break ;; esac;done
    #耦合校验
    local errorContent=
    [ ! -f "$filePathIni" ] && errorContent="${errorContent}\\n[备份包数据库文件不存在]filePathIni=$filePathIni"
    [ ! -f "$filePathIniMaintain" ] && errorContent="${errorContent}\\n[工具数据库文件不存在]filePathIniMaintain=$filePathIniMaintain"
    [ -z "$tagNameMaintain" ] && errorContent="${errorContent}\\n[默认tag名为空]tagNameMaintain=$tagNameMaintain"
    [ ! -z "$errorContent" ] && ftEcho -ea "函数[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftRestoreChoiceSource -h && return

    local suffixName=$(ftIniGetValue $filePathIniMaintain ubuntuMaintainConfigInfo backupPackageSuffixName)
    local dirPathStore=$(ftIniGetValue $filePathIniMaintain $tagNameMaintain dirPathStore)
    local filePathList=($(find ${dirPathStore} -name "*.${suffixName}"))

    if [ -z "$filePathList" ];then
        ftEcho -ex 在${dirPathStore}没找到有效的备份包
        exit
    else
        ftEcho -bh 请${ftEffect}
        local index=0
        printf "%-2s %-36s %-50s\n\n" 序号 备份包版本号 版本备注
        for filePath in ${filePathList[*]} ; do
            local fileName=$(basename $filePath)
            local versionName=${fileName%.*}
            local note=$(ftIniGetValue $filePathIni $versionName backupPackageNote)
            note=${note:-'无效版本，无相关记录'}
            printf "[%-2d] %-30s %-50s\n" ${index} ${versionName} ${note}
            ((index+=1))
        done
        while true; do
            local index=0
            ftEcho -r  "请输入备份包对应的序号(回车默认0):"
            if (( ${#filePathList[@]}>9 ));then
                read index
            else
                read -n 1 index
            fi;echo

            [ ${#index} == 0 ] && index=0 #设定默认值

            if ( ! echo -n $index | grep -q -e "^[0-9][0-9]*$");then
                ftEcho -e 错误的选择：$index ;echo  "输入1,2...... 选择    输入 n，q 离开"
                continue;
            fi

            local filePath=${filePathList[$index]}
            if [ ! -f "$filePath" ];then
                ftEcho -e  "备份包:${filePath}不存在"
                continue;
            fi

            local fileName=$(basename $filePath)
            local dirPathStore=$(dirname $filePath)
            ftIniSetValue $filePathIniMaintain $tagNameMaintain fileName "$fileName"
            ftIniSetValue $filePathIniMaintain $tagNameMaintain dirPathStore "$dirPathStore"
            break;
        done
    fi
}

ftSetBackupDevDir()
{
    local ftEffect=选择备份包存放的设备

    while true; do case "$1" in
    -h | --help) cat<<EOF
#===================[   ${ftEffect}   ]的使用示例==============
#
#   选择存储备份包的设备路径
#    ftSetBackupDevDir -b -p 版本数据库路径 -v 版本号
#
#   选择读取备份包的设备路径
#    ftSetBackupDevDir -r -p 工具数据库路径 -v 默认tag
#=========================================================
EOF
    return ;;
    * ) break;;esac;done

    #参数解析
    local editType
    local filePathIni
    local versionName

    local arg ; local arg2 ; local index ; for ((i=1;i<=$#;i++)) ; do
    eval value=\${${i}} ; arg=${value} ; ((index=i+1)) ; eval value2=\${${index}} ; arg2=${value2} ; case "${arg}" in
            -b )   editType=backup
           ;;
            -r )   editType=restore
           ;;
            -p )   filePathIni="${arg2}"
           ;;
            -v )   versionName="${arg2}"
           ;;
    * ) [[ -z "${arg}" ]] &&  break ;; esac;done
    #耦合校验
    ftInitDevicesList -s 4096M # 初始化设备列表[mXbashModuleDataDevicesList]
    local errorContent=
    [ -z "$rDirPathXbash" ] && errorContent="${errorContent}\\n[默认用户名为空]rNameUser=$rNameUser"
    [ ! -f "$filePathIni" ] && errorContent="${errorContent}\\n[备份包数据库文件不存在]filePathIni=$filePathIni"
    [ -z "$versionName" ] && errorContent="${errorContent}\\n[备份包名为空]versionName=$versionName"
    [ -z "$mXbashModuleDataDevicesList" ] && errorContent="${errorContent}\\n[可用的备份包备份存储设备列表为空]mXbashModuleDataDevicesList=${mXbashModuleDataDevicesList[@]}"
    [ ! -z "$errorContent" ] && ftEcho -ea "函数[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftSetBackupDevDir -h && return

    ftEcho -b 请${ftEffect}

    local devTarget
    local devTargetDir
    local index=0;
    local devEffectiveSpace

    for dev in ${mXbashModuleDataDevicesList[*]} ; do
        devEffectiveSpace=$(ftDevAvailableSpace $dev)
        let devEffectiveSpace=devEffectiveSpace/1024
        echo -n "[${index}] ";printf "%-25s  " $dev;echo "可用：${devEffectiveSpace}G"
        #echo [ ${index} ] $dev 可用$(ftDevAvailableSpace $dev)
        #echo [ ${index} ] ${mXbashModuleDataDevicesList[$index]}
        ((index+=1))
    done
    echo

    while true; do
        ftEcho -r  "请选择存放备份文件的设备[0~`expr $index - 1`,q](回车默认当前用户目录):"
        if [ ${#mXbashModuleDataDevicesList[@]} -gt 9 ];then
            read dir
        else
            read -n 1 dir
        fi
        #设定默认值
         [ ${#dir} == 0 ] && dir=0
         if [ ${dir} == "q" ]; then
            exit
         elif [ -n "$(echo $dir| sed -n "/^[0-$index]\+$/p")" ];then
            devTargetDir=${mXbashModuleDataDevicesList[$dir]}
            echo
            break;
         fi
         ftEcho -e 错误的选择：$dir
    done

    case "$editType" in
    backup )
        local dirPathStoreSource=${devTargetDir}/backup/os/${rNameUser}/${versionName}
        ;;
    restore )
        local dirPathStoreSource=${devTargetDir}/backup/os/${rNameUser}
        if [ ! -d $dirPathStoreSource ];then
            ftEcho -ex ${dirPathStoreSource}不存在,将退出
            return;
        fi
        ;;
    esac
    # 写入数据
    ftIniSetValue $filePathIni $versionName dirPathStore "$dirPathStoreSource"
}

ftSetBackupType()
{
    local ftEffect=设定备份类型和备份忽略列表
    local isEnable=true
    #可用校验
    [ "$isEnable" != "true" ] && ftSetBackupType --df && return

    while true; do case "$1" in
    -h | --help) cat<<EOF
#===================[   ${ftEffect}   ]的使用示例==============
#
#    ftSetBackupType -p 版本数据库路径 -v 版本名 -pm 工具数据库
#=========================================================
EOF
      return;;
    --df) cat<<EOF
#===================[   ${ftEffect}   ]的状态说明==============
#
#    ${ftEffect} 已被禁用，请确认
#=========================================================
EOF
      return;;
    * ) break;;esac;done

    #参数解析
    local filePathIni
    local versionName
    local filePathIniMaintain

    local arg ; local arg2 ; local index ; for ((i=1;i<=$#;i++)) ; do
    eval value=\${${i}} ; arg=${value} ; ((index=i+1)) ; eval value2=\${${index}} ; arg2=${value2} ; case "${arg}" in
            -p )   filePathIni="${arg2}"
           ;;
            -pm )   filePathIniMaintain="${arg2}"
           ;;
            -v )   versionName="${arg2}"
           ;;
    * ) [[ -z "${arg}" ]] &&  break ;; esac;done
    #耦合校验
    local errorContent=
    [ ! -f "$filePathIni" ] && errorContent="${errorContent}\\n[版本数据库不存在]filePathIni=$filePathIni"
    [ ! -f "$filePathIniMaintain" ] && errorContent="${errorContent}\\n[工具数据库不存在]filePathIniMaintain=$filePathIniMaintain"
    [ -z "$versionName" ] && errorContent="${errorContent}\\n[备份包名为空]versionName=$versionName"
    [ ! -z "$errorContent" ] && ftEcho -ea "函数[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftSetBackupType -h && return

    # 备份类型
    local infoBackupType=cg
    ftEcho -b 请${ftEffect}
    echo -e "[1]\t基础"
    echo -e "[2]\t全部"
    echo

    while true; do
        ftEcho -r  "请选择备份类型(默认基础):"
        read -n 1 typeIndex
        echo

        [ ${#typeIndex} == 0 ] && typeIndex=1 #设定默认值
        case $typeIndex in
            1)        infoBackupType=cg; break;;
            2)        infoBackupType=bx; break;;
             n | N | q |Q)    exit;;
            * )        ftEcho -e 错误的选择：$typeIndex ;echo "输入1,2 选择    输入n，q离开";break;;
    esac;done
    # 写入数据,备份类型
    ftIniSetValue $filePathIni $versionName backupType $infoBackupType

    #备份忽略列表
    local dirsExclude
    local filePatheExclude=$(ftIniGetValue $filePathIniMaintain ubuntuMaintainConfigInfo filePatheExclude)
    local excludeListSys=($(ftIniGetValue $filePathIniMaintain ubuntuMaintainConfigInfo dirPathsExcludeListSys))
    local excludeListHomeRoot
    local excludeListHomeBase=($(ftIniGetValue $filePathIniMaintain ubuntuMaintainConfigInfo dirPathsExcludeListHomeBase))

    local index=0
    for item in ${excludeListHomeBase[@]}; do
        excludeListHomeBase[$index]=${dirPathHome}/${item}
        excludeListHomeRoot[$index]=/root/${item}
        ((index+=1))
    done

    local dirPathsExcludeBase=(${excludeListSys[@]} ${excludeListHomeBase[@]} ${excludeListHomeRoot[@]})
    local dirPathsExcludeAll=(${excludeListSys[@]})

    if [ $infoBackupType = "cg" ];then
        dirsExclude=${dirPathsExcludeBase[*]}
    elif [ $infoBackupType = "bx" ];then
        dirsExclude=${dirPathsExcludeAll[*]}
    else
        ftEcho -ex  你想金包还是银包呢
        exit
    fi

    ftEcho -sh 更新排除列表
    rm -rf $filePatheExclude > /dev/null
    for dirpath in ${dirsExclude[@]} ; do
     echo $dirpath >>$filePatheExclude
    done
}

ftSetRestoreOverryList()
{
    local ftEffect=选择还原时忽略的目录

    while true; do case "$1" in
    -h | --help) cat<<EOF
#===================[   ${ftEffect}   ]的使用示例==============
#
#    ftSetRestoreOverryList -pm 工具数据库路径 -t 默认tag名
#=========================================================
EOF
    return ;;
    * ) break;;esac;done

    #参数解析
    local filePathIniMaintain
    local tagNameMaintain

    local arg ; local arg2 ; local index ; for ((i=1;i<=$#;i++)) ; do
    eval value=\${${i}} ; arg=${value} ; ((index=i+1)) ; eval value2=\${${index}} ; arg2=${value2} ; case "${arg}" in
            -pm )   filePathIniMaintain="${arg2}"
           ;;
            -t )   tagNameMaintain="${arg2}"
           ;;
    * ) [[ -z "${arg}" ]] &&  break ;; esac;done
    #耦合校验
    local errorContent=
    [ ! -d "$rDirPathUserHome" ] && errorContent="${errorContent}\\n[默认用户的home目录不存在]rDirPathUserHome=$rDirPathUserHome"
    [ ! -f "$filePathIniMaintain" ] && errorContent="${errorContent}\\n[工具数据库文件不存在]filePathIniMaintain=$filePathIniMaintain"
    [ -z "$tagNameMaintain" ] && errorContent="${errorContent}\\n[默认tag名为空]tagNameMaintain=$tagNameMaintain"
    [ ! -z "$errorContent" ] && ftEcho -ea "函数[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftSetRestoreOverryList -h && return

    ftEcho -b 请${ftEffect}
    echo -e "[1]\t忽略home"
    echo -e "[2]\t不忽略"
    echo

    while true; do
        ftEcho -r  "请选择还原设置(回车默认忽略home):"
        read -n 1 typeIndex
        echo

        [ ${#typeIndex} == 0 ] && typeIndex=1 #设定默认值
        case $typeIndex in
            1) ftIniSetValue $filePathIniMaintain $tagNameMaintain dirPathRestoreExclude $rDirPathUserHome;break;;
            2) break;;
            n | N | q |Q)    exit;;
            * )        ftEcho -e 错误的选择：$typeIndex ;echo "选择输入1,2 离开输入n，q";break;;
    esac;done
}

ftBackupOs()
{
    local ftEffect=生成备份包

    while true; do case "$1" in
    -h | --help) cat<<EOF
#===================[   ${ftEffect}   ]的使用示例==============
#
#    ftBackupOs -p 数据库路径
#=========================================================
EOF
    return ;;
    * ) break;;esac;done
    #参数解析
    local filePathIni
    local versionName
    local filePathIniMaintain

    local arg ; local arg2 ; local index ; for ((i=1;i<=$#;i++)) ; do
    eval value=\${${i}} ; arg=${value} ; ((index=i+1)) ; eval value2=\${${index}} ; arg2=${value2} ; case "${arg}" in
                  -p )   filePathIni="$arg2"
                     ;;
                  -pm )   filePathIniMaintain="${arg2}"
                     ;;
                  -v )   versionName="$arg2"
                     ;;
    * ) [[ -z "${arg}" ]] &&  break ;; esac;done
    #耦合校验
    local errorContent=
    [ ! -f "$filePathIni" ] && errorContent="${errorContent}\\n[信息路径为空]filePathIni=$filePathIni"
    [ ! -f "$filePathIniMaintain" ] && errorContent="${errorContent}\\n[工具数据库文件不存在]filePathIniMaintain=$filePathIniMaintain"
    [ -z "$versionName" ] && errorContent="${errorContent}\\n[版本号为空]versionName=$versionName"
    [ ! -z "$errorContent" ] && ftEcho -ea "函数[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftBackupOs -h && return

    local fileNameVersion=$(ftIniGetValue $filePathVersionInfoVersion  $versionName fileName)
    local dirPathStore=$(ftIniGetValue $filePathVersionInfoVersion $versionName dirPathStore)
    local fileNameExclude=$(ftIniGetValue $filePathIniMaintain ubuntuMaintainConfigInfo filePatheExclude)

    local filePathVersion=${dirPathStore}/${fileNameVersion}
    local filePathVersionLog=${dirPathStore}/${fileNameVersion%.*}.log
    while true; do
        ftEcho -y 是否开始备份[回车默认为y ]
        read -n 1 sel
        sel=${sel:-'y'}
        echo
        case "$sel" in
            y | Y )
                    #旧备份包处理
                        while [ -f $filePathVersion ]; do
                        ftEcho -y "备份包 ${fileName} 已存在,是否覆盖[回车默认为y ]"
                        read -n 1 sel
                        sel=${sel:-'y'}
                        echo
                        case "$sel" in
                            y | Y )
                                     rm -f $filePathVersion
                                    break;;
                            n | N | q |Q)  return ;;
                            * ) ftEcho -e 错误的选择：$sel
                            echo "输入n，q，离开";;
                        esac; done
                    #清理临时文件
                        sudo apt-get autoclean
                        sudo apt-get clean
                        sudo apt-get autoremove
                        sudo apt-get install -f
                        sudo apt-get install deborphan -y
                        dpkg -l |grep ^rc|awk '{print $2}' |sudo xargs dpkg -P
                        sudo rm -rf /var/cache/apt/archives
                    #生成备份包
                        ftEcho -bh 开始${ftEffect}
                        [ ! -d $dirPathStore ] && mkdir -p $dirPathStore
                        sudo tar --use-compress-program=pigz -cvPf $filePathVersion --exclude-from=$fileNameExclude /  2>&1 |tee $filePathVersionLog
                    #扫尾
                        rm $fileNameExclude>/dev/null
                        chmod 777 -R $dirPathStore
                        break;;
            n | N | q |Q)  return ;;
            * ) ftEcho -e 错误的选择：$sel
            echo "输入n，q，离开";;
        esac; done
}

ftMaintainInfoNote()
{
    local ftEffect=记录备份包相关备注

    while true; do case "$1" in
    -h | --help) cat<<EOF
#===================[   ${ftEffect}   ]的使用示例==============
#
#=========================================================
EOF
    return ;;
    * ) break;;esac;done

    #参数解析
    local editType
    local filePathIni
    local versionName

    local arg ; local arg2 ; local index ; for ((i=1;i<=$#;i++)) ; do
    eval value=\${${i}} ; arg=${value} ; ((index=i+1)) ; eval value2=\${${index}} ; arg2=${value2} ; case "${arg}" in
                  -a )  editType=add
                     ;;
                  -r )   editType=read
                     ;;
                  -p )   filePathIni="$arg2"
                     ;;
                  -v )   versionName="$arg2"
                     ;;
    * ) [[ -z "${arg}" ]] &&  break ;; esac;done
    #耦合校验
    local errorContent=
    [ -z "$editType" ] && errorContent="${errorContent}\\n[不知道要干啥]editType=$editType"
    [ -z "$versionName" ] && errorContent="${errorContent}\\n[备份包名为空]versionName=$versionName"
    [ ! -f "$filePathIni" ] && errorContent="${errorContent}\\n[信息路径为空]filePathIni=$filePathIni"
    [ ! -z "$errorContent" ] && ftEcho -ea "函数[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftMaintainInfoNote -h && return

    if [[ "$editType" = "add" ]]; then
        ftEcho -r  "请输入版本   ["${versionName}"]  相应的说明[回车默认为常规]:"
        read note
        local noteBase="默认" #未输入写入默认值
        ftIniSetValue $filePathIni $versionName backupPackageNote "${note:-"$noteBase"}"
    fi
}

ftMD5()
{
    local ftEffect=记录和校验备份包的MD5

    while true; do case "$1" in
    -h | --help) cat<<EOF
#===================[   ${ftEffect}   ]的使用示例==============
#
#   根据备份包的MD5校验是否修改
#    ftMD5 -p MD5信息保存路径 -c 备份包路径
#
#   保存备份包的MD5信息
#    ftMD5 -p MD5信息保存路径 -s 备份包路径
#=========================================================
EOF
    return ;;
    * ) break;;esac;done

    #参数解析
    local editType
    local filePathVersion
    local filePathInfo

    local arg ; local arg2 ; local index ; for ((i=1;i<=$#;i++)) ; do
    eval value=\${${i}} ; arg=${value} ; ((index=i+1)) ; eval value2=\${${index}} ; arg2=${value2} ; case "${arg}" in
        -c )   filePathVersion="${arg2}"
                editType=checkMd5
           ;;
        -s )   filePathVersion="${arg2}"
                editType=setMd5
           ;;
        -p )   filePathInfo="${arg2}"
           ;;
    * ) [[ -z "${arg}" ]] &&  break ;; esac;done
    #耦合校验
    local errorContent=
    [ -z "$editType" ] && errorContent="${errorContent}\\n[不知道要干啥]editType=$editType"
    [ ! -f "$filePathInfo" ]&&  errorContent="${errorContent}\\n[没有相关版本信息文件]filePathInfo=$filePathInfo"
    [ ! -f "$filePathVersion" ] && errorContent="${errorContent}\\n[目标文件不存在]filePathVersion=$filePathVersion"
    [ ! -z "$errorContent" ] && ftEcho -ea "函数[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftMD5 -h && return

    local fileNameVersion=$(basename $filePathVersion)
    local versionName=${fileNameVersion%.*}

    if [ "$editType" = "setMd5" ]; then
        ftEcho -s "备份包 : ${fileNameVersion} MD5信息正在生成，请稍等"
        local md5Code=$(md5sum $filePathVersion | awk '{print $1}')
        ftIniSetValue $filePathInfo $versionName MD5 $md5Code
        ftEcho -s "备份包 : ${fileNameVersion} MD5信息已生成"
        return
    fi

    if [ "$editType" = "checkMd5" ]; then
        ftEcho -bh "备份包 : ${versionName} MD5检验开始"
        local Md5Code=$(ftIniGetValue $filePathInfo $versionName MD5)
        if [[ -z "$Md5Code" ]]; then
            ftEcho -e "备份包 : ${versionName}  原始MD5未找到"
            exit
        fi
        local Md5CodeNow=$(md5sum $filePathVersion | awk '{print $1}')
        if [ "$Md5CodeNow"x != "$Md5Code"x ]; then
            ftEcho -e "备份包 : ${versionName} MD5检验失败"
            exit
        else
            ftEcho -s "备份包 : ${versionName} MD5检验成功"
        fi
    fi
}

ftSystemEnv()
{
    local ftEffect=记录和校验备份包软件和硬件信息

    while true; do case "$1" in
    -h | --help) cat<<EOF
#===================[   ${ftEffect}   ]的使用示例==============
#
#   记录备份包的系统软硬件信息
#    ftSystemEnv -a -v 版本号 -p 版本号对应信息存储路径
#
#   校验备份包是否兼容当前系统软硬件环境
#    ftSystemEnv -c -v 版本号 -p 版本号对应信息存储路径
#
#=========================================================
EOF
    return ;;
    * ) break;;esac;done

    #参数解析
    local editType
    local versionName
    local filePathInfo

    local arg ; local arg2 ; local index ; for ((i=1;i<=$#;i++)) ; do
    eval value=\${${i}} ; arg=${value} ; ((index=i+1)) ; eval value2=\${${index}} ; arg2=${value2} ; case "${arg}" in
        -a) editType=add
          ;;
        -c) editType=check
          ;;
        -v) versionName="$arg2"
          ;;
        -p) filePathInfo="$arg2"
          ;;
    * ) [[ -z "${arg}" ]] &&  break ;; esac;done
    #耦合校验
    local errorContent=
    [ -z "$editType" ] && errorContent="${errorContent}\\n[操作参数为空]editType=$editType"
    [ ! -f "$filePathInfo" ]&&  errorContent="${errorContent}\\n[没有相关版本信息文件]filePathInfo=$filePathInfo"
    [ ! -z "$errorContent" ] && ftEcho -ea "函数[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftSystemEnv -h && return

    local infoHwCpu=$(echo $userPassword | sudo  -p '' -S dmidecode |grep -i cpu|grep -i version|awk -F ':' '{print $2}'|sed s/[[:space:]]//g)
    local infoHwMainboard=$(echo $userPassword | sudo  -p '' -S dmidecode |grep Name |sed s/[[:space:]]//g)
    local infoHwMainboard=$(echo $infoHwMainboard |sed s/[[:space:]]//g)
    local infoHw32x64=$(echo $userPassword | sudo  -p '' -S uname -m|sed s/[[:space:]]//g)
    local infoHwSystem=$(echo $userPassword | sudo  -p '' -S head -n 1 /etc/issue|sed s/[[:space:]]//g)
    infoHwSystem=${infoHwSystem//"\n\l"/}
    infoHwSystem=${infoHwSystem//"."/}
    infoHwSystem=${infoHwSystem//Ubuntu/Ubuntu__}

    local keyCpu=hwCpu
    local keyMainboard=hwMainboard
    local keySystemVersion=swSystemVersion
    local keySystemType=swSystemType

    if [ ${editType} == "add" ]; then

        ftIniSetValue $filePathInfo $versionName $keyCpu $infoHwCpu
        ftIniSetValue $filePathInfo $versionName $keyMainboard $infoHwMainboard
        ftIniSetValue $filePathInfo $versionName $keySystemVersion $infoHwSystem
        ftIniSetValue $filePathInfo $versionName $keySystemType $infoHw32x64

        ftEcho -sh 版本${versionName}相关系统信息记录完成
        return
    fi

    if [ ${editType} == "check" ]; then

        ftEcho -bh 检查备份包和当前系统兼容程度

        local infoHwCpuVersion=$(ftIniGetValue  $filePathInfo $versionName $keyCpu)
        local infoHwMainboardVersion=$(ftIniGetValue  $filePathInfo $versionName $keyMainboard)
        local infoHwSystemVersion=$(ftIniGetValue  $filePathInfo $versionName $keySystemVersion)
        local infoHw32x64Version=$(ftIniGetValue  $filePathInfo $versionName $keySystemType)

        if [ -z "$infoHwCpuVersion" ]\
            ||[ -z "$infoHwMainboardVersion" ]\
            ||[ -z "$infoHwSystemVersion" ]\
            ||[ -z "$infoHw32x64Version" ]; then

            ftEcho -e   "版本相关系统信息损坏:\n${filePathInfo}"
            #显示相关信息存储路径
            echo infoHwCpuVersion=$infoHwCpuVersion
            echo infoHwMainboardVersion=$infoHwMainboardVersion
            echo infoHwSystemVersion=$infoHwSystemVersion
            echo infoHw32x64Version=$infoHw32x64Version
            return 9
        fi

        local returns=
        if [[ $infoHwCpuVersion != $infoHwCpu ]];then
            echo versionpackageInfo=$infoHwCpuVersion
            echo tragetInfo=$infoHwCpu
            ftSel CPU
            returns=${returns}，忽略CPU变化
        fi
        if [[ "$infoHwMainboardVersion" != "$infoHwMainboard" ]]; then
            echo versionpackageInfo= $infoHwMainboardVersion
            echo tragetInfo=$infoHwMainboard
            ftSel 主板
            returns=${returns}，忽略主板变化
        fi
        if [[ "$infoHwSystemVersion" != "$infoHwSystem" ]]; then
            echo versionpackageInfo= $infoHwSystemVersion
            echo tragetInfo=$infoHwSystem
            ftEcho -e  系统版本不一致，将自动退出
            returns=不兼容
        fi
        if [[ "$infoHw32x64Version" != "$infoHw32x64" ]]; then
            echo versionpackageInfo= $infoHw32x64Version
            echo tragetInfo=$infoHw32x64
            ftEcho -e 系统版本的位数不一致，将自动退出
            returns=不兼容
        fi
        if [ ! -z "$returns" ]; then
            ftEcho -s "备份包：${versionName} 系统兼容性检测结果为${returns}"
            return 9
        else
            ftEcho -s "备份包：${versionName} 兼容当前系统"
        fi
    fi
}

ftSel()
{
    local ftEffect=备份包软件和硬件信息校验操作选择
    local title=$1
    local valCount=1
    if(( $#!=$valCount ))||[ -z "$title" ];then
        ftEcho -ex "函数[${ftEffect}]参数错误"
    fi
    while true; do
    ftEcho -y "$1有变动,是否忽悠"
    read -n 1 sel
    case "$sel" in
        y | Y )    echo 已忽略$1;break;;
        n | N | q |Q)    exit;;
        * ) ftEcho -e 错误的选择：$sel
            echo "输入n，q，离开";;
    esac
    done
}

ftBackUpDevScanning()
{
    local ftEffect=备份设备扫描,同步
    local isEnable=true

    [ "$isEnable" != "true" ]&&[ "$1" != "--df" ] &&  ftBackUpDevScanning --df && return

    while true; do case "$1" in
    -h | --help) cat<<EOF
#===================[   ${ftEffect}   ]的使用示例==============
#
#    ftBackUpDevScanning [versionName] [note] [backup_dev_list]
#    ftBackUpDevScanning backup_cg_wgx_20161202 常规 "\${mXbashModuleDataDevicesList[*]}"
#=========================================================
EOF
    return ;;
    --df) cat<<EOF
#===================[   ${ftEffect}   ]的状态说明==============
#
#    ${ftEffect} 已被禁用，请确认
#=========================================================
EOF
    return ;;
    * ) break;;esac;done

    #参数解析
    local devList
    local fileName
    local filePathIni
    local versionName

    local arg ; local arg2 ; local index ; for ((i=1;i<=$#;i++)) ; do
    eval value=\${${i}} ; arg=${value} ; ((index=i+1)) ; eval value2=\${${index}} ; arg2=${value2} ; case "${arg}" in
        -p )   filePathIni="${arg2}"
           ;;
        -d )   devList="${arg2}"
           ;;
        -f )   fileName="${arg2}"
                versionName=${fileName%.*}
           ;;
    * ) [[ -z "${arg}" ]] &&  break ;; esac;done
    #耦合校验
    local errorContent=
    [ ! -f "$filePathIni" ] && errorContent="${errorContent}\\n[版本数据库不存在]filePathIni=$filePathIni"
    [ -z "$fileName" ] && errorContent="${errorContent}\\n[目标备份包名为空]fileName=$fileName"
    [ -z "$devList" ] && errorContent="${errorContent}\\n[存放备份包的设备目录列表为空]devList=${devList[@]} "
    [ ! -z "$errorContent" ] && ftEcho -ea "函数[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftBackUpDevScanning -h && return

    local dirPathStore=$(ftIniGetValue $filePathIni $versionName dirPathStore)

    for devDirPath in ${devList[@]}; do

        local dirPathTarget=${devDirPath}/backup/os/${rNameUser}
        local filePathversionNameTarget=${dirPathTarget}/${fileName}
        if [ "$dirPathTarget" != "$dirPathStore" ]&&[ -f "$filePathversionNameTarget" ];then
            while true; do
                ftEcho -y 在设备[${devDirPath}]上存在备份包[${versionName}],是否同步
                read -n 1 sel
                case "$sel" in
                    y | Y )
                        #可用性校验
                        if [ ! -z "$(ftSystemEnv -c $versionName -p $filePathIni)" ];then
                            ftEcho -e 设备[${devDirPath}]上的同名备份包[${versionName}]不兼容
                            break
                        fi

                        #复制备份包
                        local filePathVersion=${dirPathStore}/${fileName}
                        cp -rf -v $filePathversionNameTarget $filePathVersion

                        #清除权限限制
                        chmod 777 $filePathVersion ;;
                    n | N | q |Q) return ;;
                    * ) ftEcho -e 错误的选择：$sel
                         echo "输入n，q，离开";;
            esac; done
        fi
    done
}

ftSynchronous()
{
    local ftEffect=在不同设备间同步备份包
    local isEnable=true

    #可用性校验
    [ "$isEnable" != "true" ]&&[ "$1" != "--df" ] &&  ftSynchronous --df && return

    while true; do case "$1" in
    -h | --help) cat<<EOF
#===================[   ${ftEffect}   ]的使用示例==============
#
#    ftSynchronous -d "设备路径列表" -s "文件后缀通配列表"
#    ftSynchronous -d "/media/data_xx /media/data_xx" -s ".*\.info\|.*\.tgz\|.*\.notes\|.*\.md5s\|.*\.info"
#=========================================================
EOF
    return ;;
    --df) cat<<EOF
#===================[   ${ftEffect}   ]的状态说明==============
#
#    ${ftEffect} 已被禁用，请确认
#=========================================================
EOF
    return ;;
    * ) break;;esac;done

    #参数解析
    local dirPathArray=$1
    local fileTypeList=$2

    local arg ; local arg2 ; local index ; for ((i=1;i<=$#;i++)) ; do
    eval value=\${${i}} ; arg=${value} ; ((index=i+1)) ; eval value2=\${${index}} ; arg2=${value2} ; case "${arg}" in
        -d )   dirPathArray="${arg2}"
           ;;
        -s )   fileTypeList="${arg2}"
           ;;
    * ) [[ -z "${arg}" ]] &&  break ;; esac;done
    #耦合校验
    local errorContent=
    [ -z "$fileTypeList" ] && errorContent="${errorContent}\\n[同步类型列表为空]fileTypeList=$fileTypeList"
    [ -z "$dirPathArray" ] && errorContent="${errorContent}\\n[同步设备目录列表为空]dirPathArray=${dirPathArray[@]}"
    [ ! -z "$errorContent" ] && ftEcho -ea "函数[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftSynchronous -h && return

    while true; do
    ftEcho -y 是否开始同步
    read -n 1 sel
    case "$sel" in
        y | Y )
            ftEcho -bh 开始同步!

            for dirpath in ${dirPathArray[@]} ; do
                for dirpath2 in ${dirPathArray[@]} ; do
                    if [ ${dirpath} != ${dirpath2} ]; then
                        find $dirpath -regex "$fileTypeList" -exec cp {} -u -n -v -r $dirpath2 \;
                    fi
                done
            done
            ftEcho -s 同步结束！
            break;;
        n | N| q |Q)  exit;;
        * ) ftEcho -e 错误的选择：$sel
            echo "输入n，q，离开";;
    esac
    done
}