#!/bin/bash

ftAutoInitEnv()
{
    local ftEffect=初始化xbash_Android_build相关所需的部分环境变量
    local isEnable=true

    while true; do case "$1" in
    -h | --help) echo -e "\
#===================[   ${ftEffect}   ]的使用示例==============
#    ftAutoInitEnv 无参
#    ftAutoInitEnv -bp #强制解析build.prop信息
#========================================================="; return ;;
    --env ) echo -e "\
#===================[   ${ftEffect}   ]的使用环境说明=============
# 环境未初始化
# 使用前,请先初始化[source build/envsetup.sh;lunch xxxx]
#========================================================="; return ;;
    * ) break;;esac;done

    #可用性校验
    [ "$isEnable" != "true" ]&&  ftEcho -s "${ftEffect} 已被禁用，请确认" && return
    #解参验耦
    local dirPathCode=$ANDROID_BUILD_TOP dirPathOut=$ANDROID_PRODUCT_OUT buildType=$TARGET_BUILD_VARIANT
    local editType=$1
    if [ -z "$ANDROID_BUILD_TOP" ]\
        ||[ -z "$ANDROID_PRODUCT_OUT" ]\
        ||[ -z "$TARGET_PRODUCT" ];then
        local branchName=$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
        local dirPathLocal=$(pwd)
        #if [  -d "${dirPathLocal}/out" ] && [ -n "$branchName" ];then
        if [  -d "${dirPathLocal}/out" ] ;then
            export ANDROID_BUILD_TOP=$dirPathLocal
            dirPathCode=$ANDROID_BUILD_TOP
            dirPathOut=${ANDROID_BUILD_TOP}/out/target/product
            if [[ -d $dirPathOut ]]; then
                        while read item ;do
                           if [[ -f ${dirPathOut}/${item}/system/build.prop ]]; then
                                dirPathOut="${dirPathOut}/${item}"
                                export TARGET_PRODUCT=full_${item}
                                export ANDROID_PRODUCT_OUT=$dirPathOut
                                ftAutoInitEnv $@
                                export TARGET_BUILD_VARIANT=$AutoEnv_buildType
                                return
                           fi
                        done < <(echo "$(ls $dirPathOut)")
            fi
        else
            ftAutoInitEnv --env
        fi
        return
    fi
    local valCount=2 errorContent
    (( $#>$valCount )) && errorContent="${errorContent}\\n参数默认有${valCount}个,当前为$#个"
    [ ! -d "$dirPathCode" ] && errorContent="${errorContent}\\n[工程根目录不存在]dirPathCode=$dirPathCode"
    [[ -n "$errorContent" ]] && ftEcho -ea "函数[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftAutoInitEnv -h && return

    #实现主体
    local dirPathLocal=$PWD
    cd $dirPathCode

    # 项目平台
    local dirPathVendor=${dirPathCode}/vendor
    if [ -d $dirPathVendor ];then
            dirList=$(ls $dirPathVendor)
            for item in $dirList ; do
                if [ $item = "sprd" ];then
                     local mnufacturers=sprd
                    #device路径
                    export AutoEnv_deviceDirPath=
                    local dirPathDevice=$(find device/ -name "$(basename $ANDROID_PRODUCT_OUT)")
                    [[ -d "$dirPathDevice" ]] && export AutoEnv_deviceDirPath=$dirPathDevice

                     continue
                fi
                [ $item = "mediatek" ] && local mnufacturers=mtk
            done
    fi
    export AutoEnv_mnufacturers=
    [[ -z "$mnufacturers" ]] && ftEcho -e "未找到 $dirPathVendor\n mnufacturers[项目平台] 获取失败" || \
    export AutoEnv_mnufacturers=$mnufacturers


    #软件版本名
    export AutoEnv_versionName=
    local filePathOutBuildProp=${dirPathOut}/system/build.prop
    if [ -f $filePathOutBuildProp ];then
            local keyVersion="ro.build.display.id="
            local versionName=$(cat $filePathOutBuildProp|grep $keyVersion)
            versionName=${versionName//$keyVersion/}
            if [[ -n "$LZ_BUILD_VERSION" ]]&&[[ "$versionName" != "$LZ_BUILD_VERSION" ]]; then
                    ftEcho -e "环境与本地，软件版本不一致:\n本地:${versionName}\n环境:${LZ_BUILD_VERSION}"
            fi
    elif [[ -n "$LZ_BUILD_VERSION" ]];then
            local versionName=$LZ_BUILD_VERSION
    fi
    [ -z "$versionName" ] && versionName=$(basename $ANDROID_PRODUCT_OUT)
    versionName=${versionName// /_}
    versionName=${versionName//
/_}
    [[ -n "$versionName" ]] && export AutoEnv_versionName=$versionName

    #软件编译类型
    if [ -d $dirPathOut ];then
            local filePathBuildInfo=${dirPathOut}/system/build.prop
            local filePathPreviousBuildConfig=${dirPathOut}/previous_build_config.mk
            if [ -f $filePathBuildInfo ];then
                        local keybuildType="ro.build.type="
                        local buildTypeFile
                        if [ -f "$filePathBuildInfo" ];then
                            buildTypeFile=$(cat $filePathBuildInfo|grep $keybuildType)
                            if [[ -n "$buildTypeFile" ]];then
                                buildTypeFile=${buildTypeFile/$keybuildType/}
                                if [[ -n "$buildType" ]];then
                                    if [ "$buildType" != "$buildTypeFile" ];then
                                        ftEcho -e "环境与本地，编译类型不一致:\n本地:$buildTypeFile\n环境:$buildType"
                                        buildType=$buildTypeFile
                                    fi
                                else
                                    buildType=$buildTypeFile
                                fi
                            else
                                ftEcho -e "[$filePathBuildInfo]中未找到编译类型"
                            fi
                        fi
            else
                        ftEcho -e "未找到 $filePathBuildInfo\n build Type[本地] 获取失败"

                        if [ -f "$filePathPreviousBuildConfig" ];then
                                info=$(cat $filePathPreviousBuildConfig|grep $TARGET_PRODUCT)
                                if [[ -n "$info" ]];then

                                    local OLD_IFS="$IFS"
                                    IFS="-"
                                    local arrayItems=($info)
                                    IFS="$OLD_IFS"
                                    if [ "$info" = "$arrayItems" ];then
                                            ftEcho -e "${filePathPreviousBuildConfig} 信息解析失败"
                                    else
                                            local buildinfo=null
                                            for item in ${arrayItems[@]} ;  do
                                                if [[ "$item" = "$TARGET_PRODUCT" ]]; then
                                                    buildinfo=
                                                elif [[ -z "$buildinfo" ]]; then
                                                    buildType=$item
                                                    buildinfo=$buildType
                                                fi
                                            done
                                    fi
                                fi
                        fi
            fi
    fi
    export AutoEnv_buildType=$buildType

    #git分支信息解析
   ftBranchNameResolution

    cd $dirPathLocal
    trap SIGINT
}

complete -W "-h --help" ftBranchNameResolution
ftBranchNameResolution()
{
    local ftEffect=分支名解析
    local isEnable=true

    while true; do case "$1" in
    --rely) echo -e "\
#===================[   ${ftEffect}   ]的依赖说明=============
#    ${ftEffect}依赖包 $2
#    请尝试使用 sudo apt-get install $2 补全依赖
#========================================================="; return ;;
    -h | --help) echo -e "\
#===================[   ${ftEffect}   ]的使用示例==============
#
#    ftBranchNameResolution -h
#========================================================="; return ;;
    --env ) echo -e "\
#===================[   ${ftEffect}   ]的使用环境说明=============
# 环境未初始化
# 使用前,请先初始化[source build/envsetup.sh;lunch xxxx]
#========================================================="; return ;;
    * ) break;;esac;done

    #可用性校验
    [[ "$isEnable" = "false" ]] && ftEcho -s "${ftEffect} 已被禁用，请确认" && return
    #依赖校验
    [[ -z $(which git) ]] && ftBranchNameResolution --rely "git" && return
    #解参验耦
    local dirPathCode=$ANDROID_BUILD_TOP dirPathOut=$ANDROID_PRODUCT_OUT
    if [ -z "$ANDROID_BUILD_TOP" ]\
        ||[ -z "$ANDROID_PRODUCT_OUT" ];then
        ftBranchNameResolution --env
        return
    fi
    local valCount=0 errorContent

    (( $#!=$valCount )) && errorContent="${errorContent}\\n参数默认有${valCount}个,当前为$#个" 
    [ ! -d "$dirPathCode" ] && errorContent="${errorContent}\\n[工程根目录不存在]dirPathCode=$dirPathCode"
    [ -n "$errorContent" ] && ftEcho -ea "函数[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftBranchNameResolution -h && return

    #实现主体
    local dirPathLocal=$PWD
    cd $dirPathCode

    local branchName=$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
    local key="branchName="
    local filePathGitConfigInfoLocal=${dirPathOut}/git.info
    if [ -f "$filePathGitConfigInfoLocal" ];then
        local bn=$(cat $filePathGitConfigInfoLocal|grep "$key")
        if [[ -n "$bn" ]];then
            local branchNameFile=${bn//$key/}
            if [[ "$branchNameFile" != "$branchName" ]]; then
                    ftEcho -e "环境与本地，分支不一致:\n本地:$branchNameFile\n环境:$branchName"
            fi
            branchName=$branchNameFile
        else
            echo "${key}${branchName}" >>$filePathGitConfigInfoLocal
        fi
    elif [ -d "$dirPathOut" ];then
        echo "${key}${branchName}" >$filePathGitConfigInfoLocal
    fi
    if [[ -n "$branchName" ]];then
        local OLD_IFS="$IFS"
        IFS=")"
        local arrayItems=($branchName)
        IFS="$OLD_IFS"
        export AutoEnv_branchName=$branchName
        if [ "$branchName" = "$arrayItems" ];then
                ftEcho -e "分支信息解析失败 :${branchName}" > /dev/null
        else
                export AutoEnv_clientName=
                export AutoEnv_projrctName=
                export AutoEnv_modelAllName=
                export AutoEnv_demandSignName=
                export AutoEnv_motherboardName=
                export AutoEnv_screenScanDirection=
                export AutoEnv_BandInfo=
                export AutoEnv_FlashConfig=
                export AutoEnv_branchName=null

                for item in ${arrayItems[@]} ; do
                        local key=${item%\(*}
                        local val=${item//$key/}
                        val=${val//\(/}
                        key=${key//_/}

                         [[ $key = "CT" ]] && export AutoEnv_clientName=$val && continue
                         [[ $key = "PJ" ]] && export AutoEnv_projrctName=$val && continue
                         [[ $key = "SS" ]] && export AutoEnv_screenScanDirection=$val && continue
                         [[ $key = "DM" ]] && export AutoEnv_demandSignName=$val && continue
                         [[ $key = "PMA" ]] && export AutoEnv_modelAllName=$val && continue
                         [[ $key = "MBML" ]] && export AutoEnv_motherboardName=$val && continue
                         [[ $key = "BAND" ]] && export AutoEnv_BandInfo=$val && continue
                         [[ $key = "FLASH" ]] && export AutoEnv_FlashConfig=$val && continue
                done
                [[ -n "$branchName" ]] && export AutoEnv_branchName=$branchName
        fi
    fi
    cd $dirPathLocal
}

complete -W "-h --help" ftBuildPropResolution
ftBuildPropResolution()
{
    local ftEffect=build.prop解析
    local isEnable=true

    while true; do case "$1" in
    --rely) echo -e "\
#===================[   ${ftEffect}   ]的依赖说明=============
#    ${ftEffect}依赖包 $2
#    请尝试使用 sudo apt-get install $2 补全依赖
#========================================================="; return ;;
    -h | --help) echo -e "\
#===================[   ${ftEffect}   ]的使用示例==============
#
#    ftBuildPropResolution -h
#========================================================="; return ;;
    --env ) echo -e "\
#===================[   ${ftEffect}   ]的使用环境说明=============
# 环境未初始化
# 使用前,请先初始化[source build/envsetup.sh;lunch xxxx]
#========================================================="; return ;;
    * ) break;;esac;done

    #可用性校验
    [[ "$isEnable" = "false" ]] && ftEcho -s "${ftEffect} 已被禁用，请确认" && return
    #依赖校验
    [[ -z $(which git) ]] && ftBuildPropResolution --rely "git" && return
    #解参验耦
    local dirPathCode=$ANDROID_BUILD_TOP dirPathOut=$ANDROID_PRODUCT_OUT
    if [ -z "$ANDROID_BUILD_TOP" ]\
        ||[ -z "$ANDROID_PRODUCT_OUT" ];then
        ftBuildPropResolution --env
        return
    fi
    local valCount=0 errorContent
    (( $#!=$valCount )) && errorContent="${errorContent}\\n参数默认有${valCount}个,当前为$#个" 
    [ ! -d "$dirPathCode" ] && errorContent="${errorContent}\\n[工程根目录不存在]dirPathCode=$dirPathCode"
    [ -n "$errorContent" ] && ftEcho -ea "函数[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftBuildPropResolution -h && return

    #实现主体
    local dirPathLocal=$PWD
    cd $dirPathCode

    local keySoftType="ro.build.type=" keyModel="ro.product.model=" keySoftVersion="ro.build.display.id="
    local keySDKVersion="ro.build.version.sdk=" filePathSystemBuildprop=${dirPathOut}/system/build.prop
    local deviceModelName deviceSoftType deviceSoftVersion deviceSdkVersion

    export AutoEnv_deviceModelName=
    export AutoEnv_deviceSoftType=
    export AutoEnv_deviceSoftVersion=
    export AutoEnv_deviceSdkVersion=
    export AutoEnv_AndroidVersion=

    if [ -f "$filePathSystemBuildprop" ];then
            deviceModelName=$(cat $filePathSystemBuildprop|grep "$keyModel")
            deviceSoftType=$(cat $filePathSystemBuildprop|grep "$keySoftType")
            deviceSoftVersion=$(cat $filePathSystemBuildprop|grep "$keySoftVersion")
            deviceSdkVersion=$(cat $filePathSystemBuildprop|grep "$keySDKVersion")
    elif [ "$editType" = "-bp" ];then
            ftEcho -s "未找到 $filePathSystemBuildprop\n版本软件信息未获取"
            return
    fi

    if [[ -n "$deviceSoftVersion" ]];then
            deviceModelName=${deviceModelName//$keyModel/}
            deviceModelName=${deviceModelName// /_}
            deviceModelName=$(echo $deviceModelName |sed s/[[:space:]]//g)
            deviceModelName=${deviceModelName:-'null'}
            export AutoEnv_deviceModelName=$deviceModelName

            deviceSoftType=${deviceSoftType//$keySoftType/}
            deviceSoftType=$(echo $deviceSoftType |sed s/[[:space:]]//g)
            deviceSoftType=${deviceSoftType:-'null'}
            export AutoEnv_deviceSoftType=$deviceSoftType

            deviceSoftVersion=${deviceSoftVersion//$keySoftVersion/}
            deviceSoftVersion=$(echo $deviceSoftVersion |sed s/[[:space:]]//g)
            deviceSoftVersion=${deviceSoftVersion:-'null'}
            export AutoEnv_deviceSoftVersion=$deviceSoftVersion

            deviceSdkVersion=${deviceSdkVersion//$keySDKVersion/}
            deviceSdkVersion=$(echo $deviceSdkVersion |sed s/[[:space:]]//g)
            deviceSdkVersion=${deviceSdkVersion:-'null'}
            export AutoEnv_deviceSdkVersion=$deviceSdkVersion
            local AndroidVersion=$(ftIniGetValue $rFilePathXbashDBBase androidSDK2Verison $deviceSdkVersion)
            export AutoEnv_AndroidVersion=$AndroidVersion
    fi

    cd $dirPathLocal
}

complete -W "-b -h" ftAutoBuildMultiBranchEnvSeparation
ftAutoBuildMultiBranchEnvSeparation()
{
    local ftEffect=多分支串行编译[环境独立]/在多个终端间串行执行命令
    local isEnable=true

    while true; do case "$1" in
    -h | --help) echo -e "\
#===================[   ${ftEffect}   ]的使用示例==============
#    查看帮助
#    ftAutoBuildMultiBranchEnvSeparation -h
#
#    根据分支列表进行串行编译
#    ftAutoBuildMultiBranchEnvSeparation -b
#========================================================="; return ;;
    --env ) echo -e "\
#===================[   ${ftEffect}   ]的使用环境说明=============
# 环境未初始化
# 使用前,请先初始化[source build/envsetup.sh;lunch xxxx]
#========================================================="; return ;;
    * ) break;;esac;done

    #可用性校验
    [ "$isEnable" != "true" ]&&  ftEcho -s "${ftEffect} 已被禁用，请确认" && return
    #环境校验
    [ -z "$ANDROID_BUILD_TOP" ] && ftAutoInitEnv
    [ -z "$ANDROID_BUILD_TOP" ] && ftAutoBuildMultiBranchEnvSeparation --env && return
    [ -z "$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')" ] && ftEcho -e "当前目录不存在有效git仓库" && return
    #解参验耦
    local editType=${1,,}
    local filePathserialBuildTool=${rDirPathXbashModuleAuto}/serialBuildByBranchName.module
    local dirPathProcessEnableId=/tmp/ProcessEnableIds
    local requestEnvState=$(/bin/rm -rf $dirPathProcessEnableId&&mkdir $dirPathProcessEnableId)
    local valCount=1 errorContent
    (( $#>$valCount )) && errorContent="${errorContent}\\n参数默认有${valCount}个,当前为$#个"
    [ -z "$editType" ] && errorContent="${errorContent}\\n[请指定操作]"
    [[ -n "$requestEnvState" ]] && errorContent="${errorContent}\\n[环境初始化异常,文件夹无法重置]requestEnvState=$requestEnvState" 
    [ ! -f "$filePathserialBuildTool" ] && errorContent="${errorContent}\\n[串行编译工具不存在]filePathserialBuildTool=$filePathserialBuildTool"
    [[ -n "$errorContent" ]] && ftEcho -ea "函数[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftAutoBuildMultiBranchEnvSeparation -h && return

    #实现主体
    if [[ "$editType" = "-b" ]]; then
        cd $ANDROID_BUILD_TOP
        [ -d "$dirPathProcessEnableId" ] && rm -rf $dirPathProcessEnableId
        mkdir $dirPathProcessEnableId

        local filePathBranchList=${dirPathProcessEnableId}/branch.list
        local branchNameNow=$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
        git branch|grep -v "${branchNameNow}" | sed -e "s:*::g" > $filePathBranchList
        echo "${branchNameNow}" >> $filePathBranchList
        gedit -s $filePathBranchList
        local branchArray=($(cat $filePathBranchList))
        if [[ -n "$branchArray" ]];then
                    export branchArray=(${branchArray[@]})
                    for (( index = 0; index <${#branchArray[@]}; index++ )); do
                        ftEcho -s "任务${index}开始执行"
                        filePathState="${dirPathProcessEnableId}/${index}"
                        mkfifo $filePathState #利用管道文件堵塞循环，写入为堵，读取为疏
                        gnome-terminal  --title="任务:${index} : 编译${branchArray[$index]}" -x bash -c "$filePathserialBuildTool $index $filePathBranchList"
                        echo 1 > $filePathState
                    done
        fi
    fi
}

ftAutoBackupOrRestoreOuts()
{
    local ftEffect=Android编译生成out相关自动维护
    local isEnable=true

    while true; do case "$1" in
    -h | --help) echo -e "\
#===================[   ${ftEffect}   ]的使用示例==============
#    备份out
#    ftAutoBackupOrRestoreOuts 无参
#    ftAutoBackupOrRestoreOuts -t 备注
#
#    移动匹配out到当前项目
#    ftAutoBackupOrRestoreOuts -m
#    ftAutoBackupOrRestoreOuts -m xxx   #分支名包含xxx的out列表
#========================================================="; return ;;
    --env ) echo -e "\
#===================[   ${ftEffect}   ]的使用环境说明=============
# 环境未初始化
# 使用前,请先初始化[source build/envsetup.sh;lunch xxxx]
#========================================================="; return ;;
    * ) break;;esac;done

    #可用性校验
    [ "$isEnable" != "true" ]&&  ftEcho -s "${ftEffect} 已被禁用，请确认" && return
    #解参验耦
    ftAutoInitEnv
    local dirPathCode=$ANDROID_BUILD_TOP dirPathOut=$ANDROID_PRODUCT_OUT
    local arg arg2 index errorContent 
    local isMoveBack mTagContent filterString
    for ((i=1;i<=$#;i++)) ; do eval arg=\${${i}} ; ((index=i+1)) ; eval arg2=\${${index}} ; case "${arg}" in
        -t ) mTagContent="${arg2}"
             ;;
        -m )  isMoveBack=true
                filterString="${arg2}"
             ;;
    * ) [[ -z "${arg}" ]] && break  ;; esac;done
    if [ ! -d "$dirPathCode" ]||[  -z "$dirPathCode" ];then
        errorContent="${errorContent}\\n[工程根目录不存在]dirPathCode=$dirPathCode"
    fi
    if [ -z "$ANDROID_BUILD_TOP" ]||[ -z "$ANDROID_PRODUCT_OUT" ];then
        if [[ -f "ftAutoBackupOrRestoreOuts" ]];then
            ./ftAutoBackupOrRestoreOuts $@
            return
        fi
        ftAutoBackupOrRestoreOuts --env && return
    fi
    [[ -n "$errorContent" ]] && ftEcho -ea "函数[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftAutoBackupOrRestoreOuts -h && return

    #实现主体
    cd $dirPathCode
    #分支名
    local buildType=$AutoEnv_buildType versionName=$AutoEnv_versionName branchName="$AutoEnv_branchName"

    local dirNameCodeRootOuts=outs
    local dirPathOutTop=${dirPathCode}/out
    local dirPathCodeRootOuts=${dirPathCode%/*}/${dirNameCodeRootOuts}
    local versionInfoDateTime=$(date -d "today" +"%y%m%d[%H:%M]")
    local dirNameBranchVersion=BuildType[${buildType}]----BranchName[${branchName}]----VersionName[${versionName}]----${versionInfoDateTime}
    [[ -n "$mTagContent" ]]&&dirNameBranchVersion=${dirNameBranchVersion}_Tag[${mTagContent}]
    local dirPathOutBranchVersion=${dirPathCodeRootOuts}/${dirNameBranchVersion}

    if [ ! -d "$dirPathCodeRootOuts" ];then
        [[ -n "$isMoveBack" ]] && ftEcho -e "${dirNameCodeRootOuts}为空" && return
        mkdir -p $dirPathCodeRootOuts
    fi

    if [[ -n "$isMoveBack" ]]; then
        if [[ -d "$dirPathOut" ]]||[[ -d "$dirPathOutTop" ]]; then
            #lunch生成的out，视为无效
            local excludeConfigInfo=($(ftIniGetValue $rFilePathXbashDBAuto backupOrRestoreOutsInfo excludeConfig))
            local excludeConfigSize=${#excludeConfigInfo[@]}
            local dirPathOutTopInfo=($(ls $dirPathOutTop))
            local dirPathOutTopSize=${#dirPathOutTopInfo[@]}
            for item in ${excludeConfigInfo[@]} ; do
                    item=${dirPathOutTop}/${item}
                    [[ ! -d "$item" ]]&&[[ ! -f "$item" ]] && ((excludeConfigSize-=1)) && break
            done
            if (( $excludeConfigSize == $dirPathOutTopSize )); then
                rm -rf $dirPathOutTop
            else
                ftEcho -e "out已存在 ,请先备份"
                return
            fi
        fi

        [[ -n "$filterString" ]] && branchName=$filterString
        local dirPathOutList=($(ls $dirPathCodeRootOuts|grep $branchName))
        [[ -z "$dirPathOutList" ]] && ftEcho -e "未找到\n分支[$branchName]对应的out" && return

        local itemCount=${#dirPathOutList[@]}
        local dirNameOutTraget=$dirPathOutList
        if (( $itemCount>1 ));then
            ftEcho -s 对应分支对应多个out,请选择
            local index=0
            for item in ${dirPathOutList[@]} ; do
                printf "%-4s %-4s\n" [$index] $item
                ((index+=1))
            done

            local num=$itemCount ; local length=0 ; while (( $num>0 )); do ((num=num/10 )) ; ((length+=1)) ; done
            ftEcho -r  "请输入对应的序号(回车默认0):"
            read -n $length tIndex &&echo
            #设定默认值
            [ ${#tIndex} == 0 ] && tIndex=0 #设定默认值
            (( $itemCount<=$tIndex ))||(( $tIndex<0 ))||( ! echo -n $tIndex | grep -q -e "^[0-9][0-9]*$") && ftEcho -e "\n无效的序号:${tIndex}" && return
            dirNameOutTraget=${dirPathOutList[$tIndex]}
        fi
        mv ${dirPathCodeRootOuts}/${dirNameOutTraget} $dirPathOutTop&&
        ftEcho -s "移动 ${dirPathCodeRootOuts}/${dirNameOutTraget}\n 到  ${dirPathOutTop}"
        return
    fi

    if [ ! -d "$dirPathOutBranchVersion" ];then
        [[ ! -d "$dirPathOutTop" ]] && ftEcho -e "out 不存在" && return
        if [[ ! -d "$dirPathOut" ]]; then
             ftEcho -e "out 不完整"
             dirNameBranchVersion=${dirNameBranchVersion}____section
        fi

        local fileNameGitLogInfo=git.log
        local filePathGitLogInfo=${dirPathOutTop}/${fileNameGitLogInfo}
        [[ ! -f $filePathGitLogInfo ]] && touch $filePathGitLogInfo
        echo -e "

======================================================================================================
$dirNameBranchVersion
======================================================================================================
$(ftGitLogShell  -n 20 -c "%h  %s")" >> $filePathGitLogInfo
        mv ${dirPathOutTop}/ $dirPathOutBranchVersion&&
        ftEcho -s "移动 $dirPathOutTop \n到  ${dirPathCodeRootOuts}/${dirNameBranchVersion}"
    else
        ftEcho -ex 存在相同out
    fi
}

ftAutoUpload()
{
    local ftEffect=文件[夹]上传
    local isEnable=true

    while true; do case "$1" in
    --rely) echo -e "\
#===================[   ${ftEffect}   ]的使用环境说明=============
#    依赖缺失,请使用下面命令安装
#    sudo add-apt-repository ppa:pi-rho/security&&sudo apt-get update
#    sudo apt-get install sshpass pigz pv nmap
#=========================================================" ;return;;
    -h | --help) echo -e "\
#===================[   ${ftEffect}   ]的使用示例==============
#    ftAutoUpload 源存放目录 服务器地址
#
#    ftAutoUpload xxx 192.168.xxx.xxx
#========================================================="; return ;;
    * ) break;;esac;done

    #可用性校验
    [ "$isEnable" != "true" ]&&  ftEcho -s "${ftEffect} 已被禁用，请确认" && return
    #环境校验
     [[ -z $(which nmap) ]]|| [[ -z $(which sshpass) ]]|| [[ -z $(which pigz) ]]|| [[ -z $(which pv) ]] && ftAutoUpload --rely && return
    #解参验耦
    local filePathConfig=$rFilePathXbashDBAuto
    local dirPathContentUploadSource=$1 serverIp=$2
    local valCount=2 errorContent
    (( $#>$valCount )) && errorContent="${errorContent}\\n参数默认有${valCount}个,当前为$#个"
    [ ! -d "$dirPathContentUploadSource" ] && errorContent="${errorContent}\\n上传源存放目录不存在:dirPathContentUploadSource=$dirPathContentUploadSource"
    if [ -z "$serverIp" ];then
        errorContent="${errorContent}\\n 这个东西送到哪都没说:serverIp=$serverIp"
    else
        if [ "$serverIp" = "$(/sbin/ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6 |grep 192.168.|awk '{print $2}'|tr -d "addr:" |tr -d "地址")" ];then
            errorContent="${errorContent}\\n 目标服务器指向本机，请确认配置:serverIp=$serverIp"
        else
            local tagName=serverConfig_${serverIp}
            local userName=$(ftIniGetValue $filePathConfig $tagName userName)
            local userPassword=$(ftIniGetValue $filePathConfig $tagName userPassword)
            local dirPathPackage=$(ftIniGetValue $filePathConfig $tagName dirPathPackage)

            [ -z "$userName" ] && errorContent="${errorContent}\\n 服务器[${serverIp}]用户名获取失败"
            [ -z "$userPassword" ] && errorContent="${errorContent}\\n 服务器[${serverIp}]密码获取失败"
            [ -z "$dirPathPackage" ] && errorContent="${errorContent}\\n 服务器[${serverIp}]目标路径获取失败"
        fi
    fi
    [[ -n "$errorContent" ]] && ftEcho -ea "函数[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftAutoUpload -h && return

    #实现主体

    ftEcho -s "\n========================\n开始上传文件:\n  ${dirPathContentUploadSource}\n服务器路径:\n  ${serverIp}$dirPathPackage\n========================\n"

    local serverProtInfo="$(nmap $serverIp)"
    if [[ -z $(echo ${serverProtInfo[@]}|grep ssh) ]]&&[[ -n $(echo ${serverProtInfo[@]}|grep 445) ]]; then #使用smb协议
        local dirPathServerLocalBase=$(ftIniGetValue $filePathConfig $tagName dirPathPackageLocal)
        if ! mountpoint -q $dirPathServerLocalBase; then
            ftEcho -e "当前目录未挂载服务器共享目录:\n${dirPathUploadLocal}" && return
        else
            local key="智能机软件"
            cp -r -b -S _old -v $key $(echo $dirPathServerLocalBase | sed -e "s:/$key::g")
        fi
    else #使用ssh协议
        # 自动添加旧软件的TAG
        local dirPathServerLocalBase=$(ftIniGetValue $filePathConfig $tagName dirPathPackageLocal)
        if [[ -n "$dirPathServerLocalBase" ]]; then
            local dirPathServerLocal=${dirPathServerLocalBase}/${dirPathContentUploadSource}
            if [[ -d $dirPathServerLocal ]]&&[[ -n "$ANDROID_BUILD_TOP" ]]; then
                    local versionPath=$(dirname $dirPathServerLocal)
                    local versionName=$(basename $dirPathServerLocal)

                    ls $versionPath | while read line;do
                        if [[  ${line//$versionName} != $line ]]; then
                            local dirPath=${versionPath}/${line}
                            local dirPath_old=${dirPath}_old
                            [[ -d "$dirPath_old" ]] && dirPath_old=${dirPath_old}_old
                            mv $dirPath $dirPath_old
                        fi
                    done
            fi
        fi
        local packageSize=$(du -sk $dirPathContentUploadSource | cut -f1)k
        tar -cv  ${dirPathContentUploadSource%%/*}| pv --size $packageSize -p --timer --rate --bytes| pigz -1|sshpass -p $userPassword ssh $userName@$serverIp "gzip -d |tar -xPC $dirPathPackage"
    fi

    ftEcho -s "上传结束"
}

complete -W "-a" ftAutoPacket
ftAutoPacket()
{
    local ftEffect=基于android的out生成版本软件包
    local isEnable=true

    while true; do case "$1" in
    -h | --help) ftClearTail $dirPathLocal ; echo -e "\
#===================[   ${ftEffect}   ]的使用示例==============
#    ftAutoPacket -y #免确认自动清理out/packet
#    ftAutoPacket -u #上传到188服务器
#    ftAutoPacket -r #添加说明
#    ftAutoPacket -p #打包
#    ftAutoPacket -a #默认启动全部流程
#========================================================="; return ;;
    --env ) echo -e "\
#===================[   ${ftEffect}   ]的使用环境说明=============
# 环境未初始化
# 使用前,请先初始化[source build/envsetup.sh;lunch xxxx]
#========================================================="; return ;;
    * ) break;; esac;done

    #可用性校验
    [ "$isEnable" != "true" ]&&  ftEcho -s "${ftEffect} 已被禁用，请确认" && return
    #解参验耦
    ftAutoInitEnv
    if [ -z "$ANDROID_BUILD_TOP" ]\
            ||[ -z "$TARGET_PRODUCT" ]\
            ||[ -z "$ANDROID_PRODUCT_OUT" ];then
        if [[ -f "ftAutoPacket" ]];then
            ./ftAutoPacket
            return
        fi
        ftAutoPacket --env
        return
    fi
    local dirPathCode=$ANDROID_BUILD_TOP dirPathOut=$ANDROID_PRODUCT_OUT
    local filePathDataBase=$rFilePathXbashDBBase \
            filePathDataUser=$rFilePathXbashDBUser \
            filePathDataAuto=$rFilePathXbashDBAuto
    local dirPathLocal=$dirPathCode \
            dirNameVersionSoftware=packet \
            buildType=$AutoEnv_buildType
    local dirPathVersionSoftware=${dirPathCode}/out/${dirNameVersionSoftware}
    local editType=$1 valCount=1 errorContent
    (( $#!=$valCount )) && errorContent="${errorContent}\\n参数默认有${valCount}个,当前为$#个" 
    [ ! -d "$dirPathCode" ] && errorContent="${errorContent}\\n[工程根目录不存在]dirPathCode=$dirPathCode"
    [ ! -d "$dirPathOut" ] && errorContent="${errorContent}\\n[工程out目录不存在]dirPathOut=$dirPathOut"
    [ ! -f "$filePathDataBase" ] && errorContent="${errorContent}\\n[数据库文件不存在]filePathDataBase=$filePathDataBase"
    [[ -n "$errorContent" ]] && ftEcho -ea "函数[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftAutoPacket -h && return

    #实现主体
    local isClean isReadMe isUpload isPacket isMove isCopy isSpecial isBale
    local arg arg2 index ; for ((i=1;i<=$#;i++)) ; do eval arg=\${${i}} ; ((index=i+1)) ; eval arg2=\${${index}} ; case "${arg}" in
        -a ) isClean=true
              isReadMe=true
              isUpload=true
              isPacket=true
              isBale=true ;;
        -y ) isClean=true ;;
        -u ) isUpload=true ;;
        -r ) isReadMe=true ;;
        -p ) isPacket=true 
              isReadMe=true
              isBale=true ;;
    * ) [[ -z "${arg}" ]] && break  ;; esac;done

    if [[ -d "$dirPathVersionSoftware" ]]; then
            if [[ -n "$isClean" ]]; then
                rm  -rf $dirPathVersionSoftware
                ftEcho -s "删除旧的软件包"
            elif [[ -n "$isMove" ]]; then
                mv $dirPathVersionSoftware ${dirPathVersionSoftware}_old
                ftEcho -s "发现软件包,移至xx_old"
            elif [[ -z "$isUpload" ]]; then
                  while true; do
                        ftEcho -y "有旧的软件包  ${dirPathVersionSoftware}\n是否删除(回车默认y)"
                        read -n 1 sel ;[ -z "${sel}" ] && sel=y
                        case "$sel" in
                            y | Y ) rm  -rf $dirPathVersionSoftware
                                       break ;;
                            n | q ) break ;;
                            * ) ftEcho -e 错误的选择：$sel
                                echo "输入n，q，离开";;
                        esac
                done
                echo
            fi
    fi

    [[ ! -d "$dirPathVersionSoftware" ]] && mkdir $dirPathVersionSoftware
    cd $dirPathVersionSoftware && trap '[ -d "$dirPathLocal" ] && cd $dirPathLocal && dirPathLocal= && exit' SIGINT

    if [[ $AutoEnv_mnufacturers = "mtk" ]]; then
            local dirNamePackage="packages" dirNameOtaPackage="otaPackages" dirNamePackageDataBase="dataBase" \
                    tagName="xbashAOSPConfigSoftwarePackageFileLIst"
            local deviceName=$(basename $ANDROID_PRODUCT_OUT)

            #版本号特殊处理
            local dirNameVeriosionBase=${AutoEnv_versionName}
            #非user版本标记编译类型
            [ "$AutoEnv_buildType" != "user" ] && [[ -z "$(echo ${dirNameVeriosionBase} |grep ${AutoEnv_buildType})" ]]&& dirNameVeriosionBase=${buildType}____${dirNameVeriosionBase}
            #软件版本的日期与当前时间不一致就设定编译时间
            arr=(${AutoEnv_versionName//_/ })
            length=${#arr[@]}
            ((length-=1))
            local versionNameDate=${arr[$length]}
            [[ $versionNameDate =~ "." ]] && versionNameDate=${versionNameDate%.*}
            # system.img文件最新修改时间
            if [[ -f "${dirPathOut}/system.img" ]]; then
                    local key="最近更改："
                    local fileChangeTime=$(stat ${dirPathOut}/system.img|grep $key|awk '{print $1}'|sed s/-//g)
                    fileChangeTime=${fileChangeTime//$key/}
                    fileChangeTime=${fileChangeTime:-$(date -d "today" +"%y%m%d")}
            fi
            if [[ -n "$fileChangeTime" ]]&&[ "$versionNameDate" != "${fileChangeTime}" ];then
                export AutoEnv_SoftwareVersion_BuildTime=buildtime____${fileChangeTime}
                 #dirNameVeriosionBase=${dirNameVeriosionBase}____${AutoEnv_SoftwareVersion_BuildTime}
            fi
            if [[ -n "$isSpecial" ]]; then
                ftEcho -r $"请输入版本: "${dirNameVeriosionBase}"\n相应的说明[回车默认为常规]:"
                read tag
                tag=${tag:-'常规'}
                dirNameVeriosionBase=${tag}____${dirNameVeriosionBase}
            fi

            local dirPathVersionSoftwareVersion=${dirPathVersionSoftware}/${dirNameVeriosionBase}

            # 生成本地软件包
            if [[ -n "$isPacket" ]]; then
                    mkdir -p $dirPathVersionSoftwareVersion

                    ftEcho -s "\n========================\n包名: ${dirNameVeriosionBase}\n路径: ${dirPathVersionSoftwareVersion}\n========================\n"
                    #packages
                    ftEcho -s "创建 packages"
                    tagName="xbashAOSPConfigSoftwarePackageFileLIst"
                    local filePathSystemImage=${dirPathOut}/system.img
                    local dirPathPackage=${dirPathVersionSoftwareVersion}/${dirNamePackage}
                    local fileList=($(ftIniGetValue $filePathDataUser $tagName ${TARGET_PRODUCT}))
                    if [[ -z "$fileList" ]];then
                        ftEcho -e "未找到 [${TARGET_PRODUCT}] 对应的独立配置,将默认复制全部文件"
                        while read item ;do
                            [[ ! -f "${dirPathOut}/${item}" ]] && continue || fileList=(${fileList[@]} ${item})
                        done < <(echo "$(ls ${dirPathOut})")
                    fi
                    if [[ -f "$filePathSystemImage" ]]; then
                        if mkdir -p $dirPathPackage; then
                            for file in ${fileList[@]}; do
                                local filePath=${dirPathOut}/${file}
                                [[ ! -f "$filePath" ]] && ftEcho -e "找不到 : ${filePath}" && ftClearTail $dirPathLocal && return

                                 printf "%-2s %-30s\n" 复制 $file
                                 cp -r -f  $filePath $dirPathPackage
                            done
                        else
                            ftEcho -e "packages创建失败"
                        fi
                    else
                        ftEcho -e "软件包不完整,请确认\n不存在  $filePathSystemImage" && ftClearTail $dirPathLocal && return
                    fi

                    # database
                    ftEcho -s "创建 database"
                    tagName=xbashAOSPConfigSoftwareDataBaseFileLIst
                    local dataBaseFileList dataBaseFileListTemp
                    local dirPathPackageDataBase=${dirPathVersionSoftwareVersion}/${dirNamePackageDataBase}
                    local apdbDirPathList=($(ftIniGetValue $filePathDataAuto $tagName apdbDirPathList))
                    local mddbDirPathList=($(ftIniGetValue $filePathDataAuto $tagName mddbDirPathList))
                    for item in ${apdbDirPathList[@]} ; do
                            item=$(ftPath $item)
                            local itemPathRoot=${dirPathOut}/${item}
                            [[ ! -d "${itemPathRoot}" ]] && ftEcho -e "未找到database的apdb的相关项 ${item}" && continue
                            while read fileName ;do
                                [[ -z $(echo "${fileName}"|grep '^APDB') ]]&&[[ -z $(echo "${fileName}"|grep '^_APDB') ]]&& continue
                                local filePath=${item}/${fileName}
                                [[ -f "${itemPathRoot}/${fileName}" ]] && dataBaseFileList=(${dataBaseFileList[@]} ${filePath})
                            done < <(echo "$(ls ${itemPathRoot})")
                    done
                    for item in ${mddbDirPathList[@]} ; do
                            item=$(ftPath $item)
                            local itemPathRoot=${dirPathOut}/${item}
                            [[ ! -d "${itemPathRoot}" ]] && ftEcho -e "未找到database的mddb的相关项 ${item}" && continue
                            while read fileName ;do
                                local filePath=${item}/${fileName}
                                [[ -f "${itemPathRoot}/${fileName}" ]] && dataBaseFileList=(${dataBaseFileList[@]} ${filePath})
                            done < <(echo "$(ls ${itemPathRoot})")
                    done
                    if [[ -n "$dataBaseFileList" ]];then
                        if mkdir -p $dirPathPackageDataBase; then
                            for filePath in ${dataBaseFileList[@]}; do
                                 [[ ! -f "$filePath" ]] && filePath=${dirPathOut}/${filePath}
                                 [[ ! -f "$filePath" ]] &&  ftEcho -e "找不到 : ${filePath}" && continue

                                fileName=$(basename $filePath)
                                printf "%-2s %-30s\n" 复制 $(echo $fileName | sed "s ${dirPathOut}  ")
                                 cp -r -f  $filePath $dirPathPackageDataBase
                            done
                        else
                            ftEcho -e "database 创建失败,无法创建${dirPathPackageDataBase}"
                        fi
                    else
                        ftEcho -e "database 创建失败"
                    fi

                    # #otaPackages
                    # local dirPathOtaPackage=${dirPathVersionSoftwareVersion}/${dirNameOtaPackage}
                    # local dirPathOta=${dirPathOut}/obj/PACKAGING/target_files_intermediates
                    # if [[ -d "$dirPathOta" ]]; then
                    #     local otaFileList=$(ls ${dirPathOta}/${TARGET_PRODUCT}-target_files-* |grep .zip)
                    #     if [[ -n "$otaFileList" ]]; then
                    #          if mkdir -p $dirPathOtaPackage; then
                    #             ftEcho -s "创建 otaPackages"
                    #             for file in ${otaFileList[@]}; do
                    #                  [[ ! -f "$file" ]] && ftEcho -e "找不到 : ${file}" && ftClearTail $dirPathLocal && return

                    #                  printf "%-2s %-30s\n" 复制 $(echo $file | sed "s ${dirPathOut}/  ")
                    #                  cp -r -f  $file $dirPathOtaPackage
                    #             done
                    #         else
                    #             ftEcho -e "otaPackages 创建失败"
                    #         fi
                    #     fi
                    # else
                    #     ftEcho -e "OTA相关包未找到"
                    # fi
            fi

            # 创建版本说明
            [[ -n "$isReadMe" ]] && ftEcho -s "创建 版本说明" && ftAutoCreateReadMeBySoftwareVersion ${dirPathVersionSoftwareVersion}
            ftEcho -y "是否更新版本说明 [回车更新]" ; read -n 1 sel ; [ -z "${sel}" ] && sel=y
            [[ "${sel}" = "y" ]] && gedit -s $AutoEnv_filePathVersionReadme $AutoEnv_filePathVersionChangeListTemplate

            # 生成软件压缩包
            if [[ -n "$isBale" ]] ;then
                ftEcho -s "创建 软件压缩包"
                local dirPathSoftwareTemp=$(pwd)
                local fileNamePackage=${dirNameVeriosionBase}.tgz
                # local fileNamePackage=$(basename ${dirPathVersionSoftwareVersion}).tgz
                cd ${dirPathVersionSoftware}
                tar cvPf - ${dirNameVeriosionBase} | pigz -p $(grep 'processor' /proc/cpuinfo | sort -u | wc -l) > ${fileNamePackage}
                cd ${dirPathSoftwareTemp}

                mkdir ${dirPathVersionSoftwareVersion}/${dirNameVeriosionBase}
                mv ${dirPathVersionSoftware}/${fileNamePackage} ${dirPathVersionSoftwareVersion}/${dirNameVeriosionBase}
                mv $AutoEnv_filePathVersionChangeListTemplate ${dirPathVersionSoftwareVersion}/${dirNameVeriosionBase}
            fi

            #上传服务器
            [[ -n "$isUpload" ]] && ftAutoUpload $dirPathVersionSoftwareVersion 192.168.1.75
    elif [[ $AutoEnv_mnufacturers = "sprd" ]]; then
            if [ "$TARGET_PRODUCT" != "sp7731c_1h10_32v4_oversea" ];then
                ftEcho -ea " ${ftEffect} 缺少平台${AutoEnv_mnufacturers}的项目${TARGET_PRODUCT}的配置\
                \n请查看下面说明:"
                ftAutoPacket -h
                return
            fi
            local dirPathNormalBin=$dirPathOut
            local dirPathLogo=${dirPathCode%/*}/res
            local versionName=$AutoEnv_versionName
            local dirPathVersionSoftwareVersion=${dirPathVersionSoftware}/${versionName}
            local dirPathModemBin=${dirPathCode%/*}/res/packet_modem
            local softwareVersion=MocorDroid6.0_Trunk_16b_rls1_W16.29.2
            local filePathPacketScript=${rDirPathXbashModuleAuto}/packet_7731c.module

            [[ -n "$(cat $versionName|grep 451)" ]] && dirPathModemBin=${dirPathModemBin}2

            if [ ! -f "$filePathPacketScript" ];then
                    ftEcho -ea "[${ftEffect}]的参数错误 \
                       找不到 [sprd的打包工具]filePathPacketScript=$filePathPacketScript \
                        请查看下面说明:"
                    ftAutoPacket -h
                    return
            fi

            [[ -n "$buildType" ]]&&[ $buildType != "user" ] && versionName=${versionName}____${buildType}

            local dirPathVersionSoftwareLocal="智能机软件"

            dirPathVersionSoftwareVersion=${dirPathVersionSoftware}/${versionName}
            mkdir -p $dirPathVersionSoftwareVersion

            # 生成软件包
            if [[ -n "$isPacket" ]]; then
                   ftEcho -s "开始生成 ${versionName}.pac\n"
                    cd $dirPathVersionSoftwareVersion  && trap '[ -d "$dirPathLocal" ] && cd $dirPathLocal && dirPathLocal= && exit' SIGINT

                    /usr/bin/perl $filePathPacketScript \
                        $versionName.pac \
                        SC77xx \
                        ${versionName}\
                        ${dirPathNormalBin}/SC7720_UMS.xml \
                        ${dirPathNormalBin}/fdl1.bin \
                        ${dirPathNormalBin}/fdl2.bin \
                        ${dirPathModemBin}/nvitem.bin \
                        ${dirPathModemBin}/nvitem_wcn.bin \
                        ${dirPathNormalBin}/prodnv.img \
                        ${dirPathNormalBin}/u-boot-spl-16k.bin \
                        ${dirPathModemBin}/SC7702_pike_modem_AndroidM.dat \
                        ${dirPathModemBin}/DSP_DM_G2.bin \
                        ${dirPathModemBin}/SC8800G_pike_wcn_dts_modem.bin \
                        ${dirPathNormalBin}/boot.img \
                        ${dirPathNormalBin}/recovery.img \
                        ${dirPathNormalBin}/system.img \
                        ${dirPathNormalBin}/userdata.img \
                        ${dirPathLogo}/logo.bmp \
                        ${dirPathNormalBin}/cache.img \
                        ${dirPathNormalBin}/sysinfo.img \
                        ${dirPathNormalBin}/u-boot.bin \
                        ${dirPathNormalBin}/persist.img&&
                    ftEcho -s 生成7731c使用的pac[${dirPathVersionSoftwareVersion}/${versionName}.pac]
                    cd $dirPathLocal && dirPathLocal=
            fi
            # 生成软件压缩包
            ftEcho -s "创建 压缩packages"
            local fileNamePackage=$(basename ${dirPathVersionSoftwareVersion}).tgz
            tar --use-compress-program=pigz -xf $fileNamePackage ${dirPathVersionSoftwareVersion}

            # 生成说明文件
            [[ -n "$isReadMe" ]] && ftAutoCreateReadMeBySoftwareVersion $dirPathVersionSoftwareVersion

            #上传服务器
            [[ -n "$isUpload" ]] && ftAutoUpload $dirPathVersionSoftwareLocal 192.168.1.75

    else
            ftEcho -ea "${ftEffect} 没有平台${AutoEnv_mnufacturers}的配置\n请查看下面说明:"
            ftAutoPacket -h
            return
    fi
    cd $dirPathLocal
    trap SIGINT
}

ftAutoCreateReadMeBySoftwareVersion()
{
    local ftEffect=创建软件版本相关客户说明和版本说明
    local isEnable=true

    while true; do case "$1" in
    -h | --help) echo -e "\
#===================[   ${ftEffect}   ]的使用示例==============
#    ftAutoCreateReadMeBySoftwareVersion [dir_path_pac_res] #生成7731c使用的pac的目录，和生成所需的文件存放的目录
#    ftAutoCreateReadMeBySoftwareVersion out/pac
#========================================================="; return ;;
    --rely) echo -e "\
#===================[   ${ftEffect}   ]的使用环境说明=============
#    工具依赖包 unix2dos #sudo apt-get install tofrodos
#========================================================="; return;;
    --env ) echo -e "\
#===================[   ${ftEffect}   ]的使用环境说明=============
# 环境未初始化
# 使用前,请先初始化[source build/envsetup.sh;lunch xxxx]
#
#========================================================="; return ;;
    * ) break;;esac;done

    #可用性校验
    [ "$isEnable" != "true" ]&&  ftEcho -s "${ftEffect} 已被禁用，请确认" && return
    #环境校验
    [[ -z $(which todos) ]]|| [[ -z $(which fromdos) ]] && ftAutoCreateReadMeBySoftwareVersion --rely && return
    #解参验耦
    ftAutoInitEnv
    [ -z "$ANDROID_BUILD_TOP" ]||[ -z "$ANDROID_PRODUCT_OUT" ] && ftAutoCreateReadMeBySoftwareVersion --env && return
    local dirPathCode=$ANDROID_BUILD_TOP dirPathOut=$ANDROID_PRODUCT_OUT dirPathVersionSoftware=$1
    local filePathConfig=$rFilePathXbashDBAuto
    [[ -z "$dirPathVersionSoftware" ]]&&dirPathVersionSoftware=${dirPathOut}/${AutoEnv_versionName}
    dirPathVersionSoftware=$(ftPath $dirPathVersionSoftware)
    local valCount=1 errorContent
    #(( $#!=$valCount )) && errorContent="${errorContent}\\n参数默认有${valCount}个,当前为$#个" 
    [ ! -d "$dirPathCode" ] && errorContent="${errorContent}\\n[工程根目录不存在]dirPathCode=$dirPathCode"
    [ ! -d "$dirPathOut" ] && errorContent="${errorContent}\\n[工程out目录不存在]dirPathOut=$dirPathOut"
    [ ! -f "$filePathConfig" ] && errorContent="${errorContent}\\n[配置文件不存在]filePathConfig=$filePathConfig"
    [[ -n "$errorContent" ]] && ftEcho -ea "函数[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftAutoCreateReadMeBySoftwareVersion -h && return

    #实现主体
    local dirPathLocal=${PWD} fileNameReadMeTemplate=客户说明.txt fileNameChangeListTemplate=版本说明.txt
    local filePathReadMeTemplate=${dirPathVersionSoftware}/${fileNameReadMeTemplate}
    local filePathChangeListTemplate=$(dirname $dirPathVersionSoftware)/${fileNameChangeListTemplate}
    local versionName=$AutoEnv_versionName

    [ ! -d "$dirPathVersionSoftware" ] && mkdir $dirPathVersionSoftware
    cd $dirPathCode && trap '[ -d "$dirPathLocal" ] && cd $dirPathLocal && dirPathLocal= && exit' SIGINT

    #使用git 记录的修改记录
    local gitCommitListOneDay=$(ftGitLogShell -t "%h %s" -n 30) gitCommitListBefore=$(ftGitLogShell -t "%h %s" -n 30)

    if [ $AutoEnv_mnufacturers = "sprd" ];then
            # 暗码清单,动画切换暗码
            local filePathPawInfo=${dirPathCode}/packages/apps/Dialer/src/com/android/dialer/SpecialCharSequenceMgr.java
            if [ -f $filePathPawInfo ];then
                    local key="    private static final String PAW_NUM_INFO ="
                    local pawNumInfo=$(cat $filePathPawInfo|grep "$key")  #获取暗码清单信息
                    pawNumInfo=${pawNumInfo//$key/};
                    pawNumInfo=${pawNumInfo//\";/};
                    pawNumInfo=${pawNumInfo//\"/};
                    pawNumInfo=$(echo $pawNumInfo |sed s/[[:space:]]//g)

                    key="    private static final String LOGO_CHANGE ="
                    local changLogoNumInfo=$(cat $filePathPawInfo|grep "$key")  #动画切换暗码信息
                    changLogoNumInfo=${changLogoNumInfo//$key/};
                    changLogoNumInfo=${changLogoNumInfo//\";/};
                    changLogoNumInfo=${changLogoNumInfo//\"/};
                    changLogoNumInfo=$(echo $changLogoNumInfo |sed s/[[:space:]]//g)
            else
                    ftEcho -e "[工程暗码配置文件不存在:]\n$filePathPawInfo"
            fi

            #摄像头配置相关
            local filePathCameraConfig=${dirPathCode}/${AutoEnv_deviceDirPath}/BoardConfig.mk
            if [ -f $filePathCameraConfig ];then
                    local keyType="LZ_CONFIG_CAMERA_TYPE := "
                    local keySizeBack="CAMERA_SUPPORT_SIZE := "
                    local keySizeFront="FRONT_CAMERA_SUPPORT_SIZE := "

                    local cameraTypeInfo=$(cat $filePathCameraConfig|grep "$keyType")
                    local cameraSizeBackMax=$(cat $filePathCameraConfig|grep "$keySizeBack")
                    local cameraSizeFrontMax=$(cat $filePathCameraConfig|grep "$keySizeFront")

                    cameraTypeInfo=${cameraTypeInfo//$keyType/};
                    cameraSizeFrontMax=${cameraSizeFrontMax//$keySizeFront/};

                    cameraSizeBackMax=${cameraSizeBackMax//${keySizeFront}$cameraSizeFrontMax/};
                    cameraSizeBackMax=${cameraSizeBackMax//$keySizeBack/};

                    cameraTypeInfo=$(echo $cameraTypeInfo |sed s/[[:space:]]//g)
                    cameraSizeFrontMax=$(echo $cameraSizeFrontMax |sed s/[[:space:]]//g)
                    cameraSizeBackMax=$(echo $cameraSizeBackMax |sed s/[[:space:]]//g)

                    sizeFcameraList=(real 2M 5M 8M)
                    sizeBcameraList=(real 2M 5M 8M 12M)
                    local cameraSizeFrontDefault=${sizeFcameraList[LZ_FCAM]}
                    local cameraSizeBackDefault=${sizeBcameraList[LZ_BCAM]}
            else
                    ftEcho -e "[相机配置文件不存在，获取失败]\n$filePathCameraConfig"
            fi

            #修改记录头部
            local enterLine="\n"
            local content="当前版本：$versionName"${enterLine}
            content=${content}${enterLine}"说明：$(ftIniGetValue $filePathConfig projectSoftwareReadMeInfo recordMeTag)"
            content=${content}${enterLine}"记录创建人：$(ftIniGetValue $filePathConfig projectSoftwareReadMeInfo recordCreator)"
            content=${content}${enterLine}
            content=${content}${enterLine}"摄像头类型：$cameraTypeInfo"
            content=${content}${enterLine}"默认 前/后摄大小：$cameraSizeFrontDefault/$cameraSizeBackDefault"
            content=${content}${enterLine}"真实插值 前/后摄大小：$cameraSizeFrontMax/$cameraSizeBackMax"
            # content=${content}${enterLine}"默认 RAM/ROM：$sizeRam/$sizeRom"
            content=${content}${enterLine}
            content=${content}${enterLine}"暗码清单：$pawNumInfo"
            content=${content}${enterLine}"开关机动画暗码：$changLogoNumInfo"

            #git log 列表
            echo -e "﻿$gitCommitListBefore">$filePathChangeListTemplate
            seq 10 | awk '{printf("    %02d %s\n", NR, $0)}' $filePathChangeListTemplate >${filePathChangeListTemplate}.temp

            # 合并头部和git log 列表
            echo -e ${content}${enterLine}${enterLine}"修改记录："| cat - ${filePathChangeListTemplate}.temp >$filePathChangeListTemplate
            rm ${filePathChangeListTemplate}.temp

            # 转化为windows下面文件格式
            unix2dos $filePathChangeListTemplate

            export AutoEnv_filePathVersionChangeListTemplate=$filePathChangeListTemplate
            # export AutoEnv_filePathVersionReadme=$filePathReadMeTemplate

   elif [[ $AutoEnv_mnufacturers = "mtk" ]]; then

            #版本说明
                #修改记录头部
                local enterLine="\n"
                local content="$(ftIniGetValue $filePathConfig projectSoftwareReadMeInfo recordMeTag)"
                content=${content}${enterLine}"记录创建人：$(ftIniGetValue $filePathConfig projectSoftwareReadMeInfo recordCreator)"
                content=${content}${enterLine}
                content=${content}${enterLine}"当前版本：$versionName"
                content=${content}${enterLine}"基础版本："
                content=${content}${enterLine}
                content=${content}${enterLine}"部分修改说明："
                content=${content}${enterLine}
                content=${content}${enterLine}"修改记录："
                #git log 列表
                echo -e "﻿$gitCommitListBefore">$filePathChangeListTemplate
                seq 10 | awk '{printf("    %02d %s\n", NR, $0)}' $filePathChangeListTemplate >${filePathChangeListTemplate}.temp
                # 合并头部和git log 列表
                echo -e ${content}${enterLine}${enterLine}"git commit 记录："| cat - ${filePathChangeListTemplate}.temp >$filePathChangeListTemplate
                rm ${filePathChangeListTemplate}.temp

            #客户说明
            content="$(ftIniGetValue $filePathConfig projectSoftwareReadMeInfo recordMeTag)"
            content=${content}${enterLine}"记录创建人：$(ftIniGetValue $filePathConfig projectSoftwareReadMeInfo recordCreator)"
            content=${content}${enterLine}
            content=${content}${enterLine}"当前版本：$versionName"
            content=${content}${enterLine}"基础版本："
            content=${content}${enterLine}
            content=${content}${enterLine}"修改说明："
            echo -e ${content}${enterLine}${enterLine} >$filePathReadMeTemplate

            # 转化为windows下面文件格式
            unix2dos $filePathChangeListTemplate
            unix2dos $filePathReadMeTemplate

            export AutoEnv_filePathVersionChangeListTemplate=$filePathChangeListTemplate
            export AutoEnv_filePathVersionReadme=$filePathReadMeTemplate
    fi
    cd $dirPathLocal
    trap  SIGINT
}

complete -W "-rc -rt -e -p -h -d" ftAutoTest
ftAutoTest()
{
    local ftEffect=AndroidMonkey测试
    local isEnable=true

    while true; do case "$1" in
     --rely) echo -e "\
#===================[   ${ftEffect}   ]的使用环境说明=============
#    adb当前无法正常使用， 请确认 Android SDK 配置是否正确
#========================================================="; return;;
    -h | --help) echo -e "\
#===================[   ${ftEffect}   ]的使用示例==============
#    #-xx 为独立参数类型标识,不可拆分
#    #参数之间没有先后约束
#
#    ftAutoTest -p "com.xx com.yy.zz" #只测试的包名
#    ftAutoTest -pb "com.xx com.yy.zz" #禁止测试的包名
#    ftAutoTest -d /home/xxx/xxx    # log存放路径
#    ftAutoTest -rc 3000    2000        #每3000s重启一次,重启2000次
#    ftAutoTest -e 2000             #monkey事件数为2000
#========================================================="; return ;;
    * ) break;;esac;done

    #可用性校验
    [ "$isEnable" != "true" ]&&  ftEcho -s "${ftEffect} 已被禁用，请确认" && return
    #环境校验
     [[ -z $(which adb) ]] && ftAutoTest --rely && return
    #解参验耦
    local editType=$1
    local eventCountDef=$(( 100 * 100 *100 )) rebootTimeLongDef=-1 rebootCountDef=1
    local eventCount=$eventCountDef rebootTimeLong=$rebootTimeLongDef rebootCount=$rebootCountDef dirPathLogRoot=~/log
    local packageNameList packageBlackNameList packageWhiteNameList
    local arg  arg2 arg3 index ; for ((i=1;i<=$#;i++)) ; do eval arg=\${${i}}
        ((index=i+1)) ;eval arg2=\${${index}}
        ((index=i+2)) ;eval arg3=\${${index}}
        case "${arg}" in
              -p)     packageNameList=${arg2}                            ;;
              -pb)   packageBlackNameList=${arg2}                   ;;
              -d)     dirPathLogRoot=${arg2:-'dirPathLogRoot'}          ;;
              -rc)    rebootTimeLong=${arg2:-'rebootTimeLongDef'}
                       rebootCount=${arg3:-'rebootCountDef'}  ;;
              -e)     eventCount=${arg2:-'eventCountDef'}                   ;;
    * ) [[ -z "${arg}" ]] &&  break ;; esac;done
    local errorContent
    (($rebootTimeLong!=$rebootTimeLongDef))&&( ! echo -n $rebootTimeLong | grep -q -e "^[0-9][0-9]*$") && errorContent="${errorContent}\\n[时长必须为数字[单位S]]rebootTimeLong=$rebootTimeLong"
    [[ -n $packageBlackNameList ]]&&[[ -n $packageNameList ]] && errorContent="${errorContent}\\n 包限制配置错误1"
    [[ -n "$errorContent" ]] && ftEcho -ea "函数[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftAutoTest -h && return

    #实现主体
    local filePathDeviceInfo=/system/build.prop
    local dirPathLogMonkeyBase=${dirPathLogRoot}/monkey
    local dirNameLogMonkey=$(date -d "today" +"%y%m%d%H%M%S")
    local dirPathLogMonkey=${dirPathLogMonkeyBase}/${dirNameLogMonkey}
    local filePathLogMonkey=${dirPathLogMonkey}/monkey.log
    local filePathLogAdbLogcat=${dirPathLogMonkey}/logcat.log
    local dirPathDevicesTarget="/storage/sdcard0"
    local monkeyConfig logcatFlag #="*:E"

    # monkey命令参数配置
        # monkeyConfig=${monkeyConfig}" --wait-dbg"
        monkeyConfig=${monkeyConfig}" --ignore-crashes --ignore-timeouts --ignore-security-exceptions"
        if [[ -n $packageBlackNameList ]]; then
            local fileNameBlack="monkey.blacklist"
            local filePathBlack="${rDirPathUserHome}/temp/${fileNameBlack}"
            rm -rf $filePathBlack
            for packageName in ${packageBlackNameList[@]} ; do echo package:${packageName} >> $filePathBlack ;done
            adb push $filePathBlack $dirPathDevicesTarget && monkeyConfig=${monkeyConfig}" --pkg-blacklist-file ${filePathBlack}"

        elif [[ -n $packageNameList ]]; then
            if ((${#packageNameList[@]}>1)); then
                local fileNameWhite="monkey.whitelist"
                local filePathWhite="${rDirPathUserHome}/temp/${fileNameWhite}"
                rm -rf $filePathWhite
                for packageName in ${packageWhiteNameList[@]} ; do echo package:${packageName} >> $filePathWhite ;done
                adb push $filePathWhite $dirPathDevicesTarget && monkeyConfig=${monkeyConfig}" --pkg-whitelist-file ${filePathWhite}"
            else
                monkeyConfig=${monkeyConfig}" -p ${packageNameList}"
            fi
        fi
        monkeyConfig=${monkeyConfig}" -v -v -v"
        monkeyConfig=${monkeyConfig}" ${eventCount}"

    #adb状态确认
        ftEcho -s "等待设备连接" && adb wait-for-device && ftEcho -s "连接设备成功"
        local adbStatus=$(adb get-state)
        [ "$adbStatus" != "device" ] && ftEcho -e "adb连接状态[$adbStatus]异常,请重新尝试" && return
    #环境清理
        for folder in $(ls $dirPathLogMonkeyBase); do  [[ ! $folder =~ "done" ]] && rm -rf ${dirPathLogMonkeyBase}/${folder} ;done
        [[ ! -d $dirPathLogMonkey ]] && mkdir -p $dirPathLogMonkey
        adb logcat -c
    #无效进程清理
        for pid in $(ps -ef |grep adb |grep logcat |awk '{print $2}'); do kill -9 $pid  ;done
        ftKillApplicationByPackageName monkey > /dev/null
    #记录设备信息
        adb pull $filePathDeviceInfo $dirPathLogMonkey > /dev/null&& ftEcho -s "设备信息已保存到${dirPathLogMonkey}"
    #开始测试
        if (( $rebootCount==$rebootCountDef ));then
                echo monkeyConfig=${monkeyConfig[@]}
                adb logcat "$logcatFlag" > $filePathLogAdbLogcat &
                adb shell monkey "${monkeyConfig}" 2>&1 |tee $filePathLogMonkey
        else
                while true; do
                    ftEcho -s "等待设备连接" && adb wait-for-device && ftEcho -s "连接设备成功"
                    [ "$(adb get-state)" != "device" ] && ftEcho -e "设备连接状态异常,请重新尝试" && break
                    tput sc ; while [[ -z $(adb shell ps |grep launcher) ]]; do
                        tput rc;tput ed
                        ftEcho -sn "等待launcer启动..."
                        sleep 5
                    done ;echo

                    if (($rebootTimeLong!=$rebootTimeLongDef)); then
                        timeout $rebootTimeLong adb shell monkey "$monkeyConfig" 2>&1 >> $filePathLogMonkey &
                        timeout $rebootTimeLong adb logcat "$logcatFlag" |tee -a $filePathLogAdbLogcat
                    else
                        adb logcat "$logcatFlag" |tee -a $filePathLogAdbLogcat &
                        adb shell monkey "$monkeyConfig" 2>&1 |tee $filePathLogMonkey
                    fi

                    rebootCount=$((rebootCount - 1))
                    if (( $rebootCount>0 )); then
                        ftEcho -s "开始设备重启"
                        adb reboot
                    else
                        break
                    fi
            done
        fi
    #扫尾
        for pid in $(ps -ef |grep adb |grep logcat |awk '{print $2}'); do kill -9 $pid  ;done
        [[ -n $(adb shell ls ${dirPathDevicesTarget}/mtklog) ]] && ftEcho -s "正在导出mtklog,请稍等..." && adb pull ${dirPathDevicesTarget}/mtklog $dirPathLogMonkey
        mv $dirPathLogMonkey ${dirPathLogMonkey}_done
}

complete -W "-t -h --help" ftAutoEditGitTag
ftAutoEditGitTag()
{
    local ftEffect=GIT的TAG常见操作
    local isEnable=true

    while true; do case "$1" in
    --rely) echo -e "\
#===================[   ${ftEffect}   ]的依赖说明=============
#    ${ftEffect}依赖包 $2
#    请尝试使用 sudo apt-get install $2 补全依赖
#========================================================="; return ;;
    -h | --help) echo -e "\
#===================[   ${ftEffect}   ]的使用示例==============
#
#    添加标签
#    ftAutoEditGitTag -a 标签名 标签名对应的commitid
#
#    删除标签
#    ftAutoEditGitTag -d 标签名
#========================================================="; return ;;
    * ) break;;esac;done

    #可用性校验
    [[ "$isEnable" = "false" ]] && ftEcho -s "${ftEffect} 已被禁用，请确认" && return
    #依赖校验
    [[ -z $(which git) ]] && ftExample --rely "git" && return
    #解参验耦
    local valCount=1 errorContent index arg arg2 arg3
    local tagName noteContent commitId isDeleteTag
    local branchName=$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
    for ((i=1;i<=$#;i++)) ; do eval arg=\${${i}}
    ((index=i+1)) ; eval arg2=\${${index}}
    ((index=i+2)) ; eval arg3=\${${index}}
    case "${arg}" in
        -a ) tagName="${arg2}"
            commitId="${arg3}"
            [[ -z "$commitId" ]] && commitId=$(ftGitLogShell -t "%h" -n 1)
          ;;
        -d ) tagName="${arg2}"
              isDeleteTag=true
          ;;
    * ) [[ -z "${arg}" ]] && break  ;; esac;done

    [ -z "$tagName" ] && errorContent="${errorContent}\\n[示例1]tagName=$tagName"
    [ -z "$branchName" ] && errorContent="${errorContent}\\n[当前目录无有效git仓库]"
    [ -n "$errorContent" ] && ftEcho -ea "函数[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftAutoEditGitTag -h && return

    #实现主体
    if [[ -n "$isDeleteTag" ]];then
        git tag -d $tagName && git push origin :refs/tags/${tagName}
        return
    fi

    local fileNameVersionNote="${tagName}的相应说明"
    local filePathVersionNote=/tmp/${fileNameVersionNote}
    if touch $filePathVersionNote ; then
        XMODIFIERS=@im=fcitx GTK_IM_MODULE=xim gedit -s $filePathVersionNote
    else
        ftEcho -ex "创建临时说明信息文件失败"
        return;
    fi

    noteContent="$(cat $filePathVersionNote)" ;rm -rf $filePathVersionNote

    if [[ -z "$noteContent" ]];then
        echo -n "空的备注信息，是否使用commit名作为备注信息[y/n] (回车默认y)"
        read -n 1 sel ;[ -z "${sel}" ] && sel=y
        while true; do case "$sel" in
                y | Y )echo
                    noteContent=$(ftGitLogShell -t "%s" -n 1) ; break;;
                n | q )  echo ;
                    return ;;
                * ) ftEcho -e "错误的选择：$sel"
                    echo "输入n，q，离开";;
    esac;done ; fi

    [[ -z "$noteContent" ]] && ftEcho -e 标签添加失败,缺少备注 && return
    git tag -a "$tagName" -m "${noteContent[@]}" "$commitId"
}

complete -W "-h --help --rely_install" ftAutoCreateSxtdBranch
ftAutoCreateSxtdBranch()
{
    local ftEffect=自动生成sxtd老项目的分支
    local isEnable=true

    while true; do case "$1" in
    --rely) echo -e "\
#===================[   ${ftEffect}   ]的依赖说明=============
#    ${ftEffect}依赖包 $2
#    请尝试使用 sudo apt-get install $2 补全依赖
#========================================================="; return ;;
    --rely_install)
            ftEcho -s "开始补全依赖"
            sudo apt-get update
            sudo apt-get install git
            return ;;
    -h | --help) echo -e "\
#===================[   ${ftEffect}   ]的使用示例==============
#
#    ftAutoCreateSxtdBranch  #无参数
#========================================================="; return ;;
    --env) echo -e "\
#===================[   ${ftEffect}   ]的使用环境说明==============
# 环境未初始化
# 使用前,请先进入AOSP项目
#========================================================="; return ;;
    * ) break;;esac;done

    #可用性校验
    [[ "$isEnable" = "false" ]] && ftEcho -s "${ftEffect} 已被禁用，请确认" && return
    #环境校验
    if [[ -z "$ANDROID_BUILD_TOP" ]];then
        [[ -d "alps" ]]&&[[ -d ".git" ]]&&cd alps
        ftAutoInitEnv > /dev/null
    fi
    local dirPathAospRoot=$(dirname $ANDROID_BUILD_TOP)
    [[ ! -d "${dirPathAospRoot}" ]] && ftAutoCreateSxtdBranch --env && return
    local dirPathLocal=$(pwd)
    cd "${dirPathAospRoot}"
    #依赖校验
    [[ -z $(which git) ]] && ftAutoCreateSxtdBranch --rely "git" && return
    #解参验耦
    local valCount=1 errorContent index arg arg2
    local branchName=$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')

    [ -z "$branchName" ] && errorContent="${errorContent}\\n[当前目录无有效git仓库]"
    [ -n "$errorContent" ] && ftEcho -ea "函数[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftAutoCreateSxtdBranch -h && return

    #实现主体
    ftEcho -s "开始收集项目状态"
    local hashValBase=$(ftGitLogShell -t "%h" -n 1)
    git reset > /dev/null
    git add -A $(git status --porcelain |grep -v "alps/out" | sed s/??//g\
    | sed -e "s: T ::g"\
    | sed -e "s: M ::g"\
    | sed -e "s: D ::g"\
    |grep "alps/") > /dev/null
    git status --porcelain

    echo -n "请确认待commit修改列表,是否正确 [y/n] (回车默认y)"
    read -n 1 sel ;[ -z "${sel}" ] && sel=y
    while true; do case "$sel" in
            y | Y )
                local tarPackagAutoCreateName=0tempBranch tarPackagAutoCreateNameTemp=temp
                ls | while read line;do
                    [[ ! -d "$line" ]] && continue
                    if [[  ${line//$tarPackagAutoCreateName} != $line ]]; then
                        local dirPath=${line}
                        local dirPath_old=${dirPath}_old
                        [[ -d "$dirPath_old" ]] && dirPath_old=${dirPath_old}_old
                        mv $dirPath $dirPath_old
                    fi
                done

                ftEcho -s "开始添加临时commit"
                git commit -m "temp" > /dev/null
                local hashValTemp=$(ftGitLogShell -t "%h" -n 1)
                git diff $hashValTemp $hashValBase --name-only | xargs tar -rf ${tarPackagAutoCreateName}.tar

                mkdir $tarPackagAutoCreateNameTemp
                tar -xvf ${tarPackagAutoCreateName}.tar -C ${tarPackagAutoCreateNameTemp}

                [[ -z $(ls $tarPackagAutoCreateNameTemp) ]] && ftEcho -e "分支patch包生成失败,请确认是否有除[?/T/M/D]之外修改类型" \
                && rm -rf ${tarPackagAutoCreateNameTemp} && return

                mv ${tarPackagAutoCreateNameTemp}/alps ${tarPackagAutoCreateName}
                rm -rf $tarPackagAutoCreateNameTemp ${tarPackagAutoCreateName}.tar
                ftEcho -s "已生成临时分支: ${tarPackagAutoCreateName}"

                break;;
            n | q )  echo ;
                return ;;
            * ) ftEcho -e "错误的选择：$sel"
                echo "输入n，q，离开";;
    esac;done ;
    git reset $hashValBase > /dev/null #&& ftEcho -s "已删除临时commit"
    cd "${dirPathLocal}"
}

ftAutoLnOut()
{
    local ftEffect=自动链接out到其他硬盘
    local isEnable=true

    while true; do case "$1" in
    -h | --help) echo -e "\
#===================[   ${ftEffect}   ]的使用示例==============
#
#    ftAutoLnOut -p 存放out的设备路径
#========================================================="; return ;;
    --env) echo -e "\
#===================[   ${ftEffect}   ]的使用环境说明==============
# 环境未初始化
# 使用前,请先进入AOSP项目
#========================================================="; return ;;
    * ) break;;esac;done

    #可用性校验
    [[ "$isEnable" = "false" ]] && ftEcho -s "${ftEffect} 已被禁用，请确认" && return
    #环境校验
    if [[ -z "$ANDROID_BUILD_TOP" ]];then
        [[ -d "alps" ]]&&[[ -d ".git" ]]&&cd alps
        ftAutoInitEnv > /dev/null
    fi
    local dirPathAospRoot aospProjectName
    dirPathAospRoot=$(dirname $ANDROID_BUILD_TOP)
    aospProjectName=$(basename $dirPathAospRoot)
    [[ ! -d "${dirPathAospRoot}" ]] && ftAutoCreateSxtdBranch --env && return
    local dirPathLocal=$(pwd)
    #解参验耦
    local valCount=2 errorContent index arg arg2
    local dirPathDev
    for ((i=1;i<=$#;i++)) ; do eval arg=\${${i}} ; ((index=i+1)) ; eval arg2=\${${index}}
    case "${arg}" in
        -p ) dirPathDev="${arg2}"
            dirPathDev=$(ftPath ${dirPathDev})
          ;;
    * ) [[ -z "${arg}" ]] && break  ;; esac;done

    (( $#>$valCount )) && errorContent="${errorContent}\\n参数默认有${valCount}个,当前为$#个" 
    [ ! -d "$dirPathDev" ] && errorContent="${errorContent}\\n[无法链接到目标路径]dirPathDev=$dirPathDev"
    [ -n "$errorContent" ] && ftEcho -ea "函数[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftAutoLnOut -h && return

    #实现主体
    cd "${ANDROID_BUILD_TOP}"
    [[ -L "out" ]] && rm out
    if [[ -d "out" ]]; then
        echo -en "out已存在,请选择操作 (回车默认1):\n1 备份 \n2 删除 \n任意其他键取消操作"
        read -n 1 sel ;[ -z "${sel}" ] && sel=1;echo
        while true; do case "$sel" in
                1 )
                    ftAutoBackupOrRestoreOuts
                    break;;
                2 )
                    rm -rf out
                    break;;
                n | q )
                    ftEcho -s "取消操作"
                    return ;;
        esac;done ;
    fi

    dirPathDev="${dirPathDev}/outs/${aospProjectName}"
    [[ ! -d "${dirPathDev}" ]] && mkdir -p "${dirPathDev}"
    [[ ! -d "${dirPathDev}" ]] && ftEcho -s "设备路径初始化失败,无法创建${dirPathDev}" && return
    ln -s "${dirPathDev}" out && ftEcho -s "已创建指向[${dirPathDev}]的软链接"
    cd "${dirPathLocal}"
}