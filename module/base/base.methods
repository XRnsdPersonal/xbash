#!/bin/bash
_ftMain()
{
    local ftEffect=bash内建命令和xbash扩展封装对应的参数补全实现
    local isEnable=def

    local curr_arg=${COMP_WORDS[COMP_CWORD]}
    case "${COMP_WORDS[1]}" in
                    -)
                            COMP_WORDS[1]="-h"
                            export COMP_WORDS=${COMP_WORDS[@]}; ;;
                    *)  COMPREPLY=( $(compgen -W '-h -hb -hc --help -t test  -v --version -ft' -- $curr_arg ) ); ;;
      esac
}
ftMain()
{
    local ftEffect=早期工具主入口
    local isEnable=def

    while true; do
    case $1 in
    -v | --version )
                echo \"Xrnsd extensions to bash\" $rXbashVersion
                break;;
    -t | test )
                ftTest "$@"
                break;;
    -h | --help )
                ftEcho -s " xc -h    #查看所有说明\n xc -hb   #bash内建命令和xbash扩展封装说明\n xc -ft   #对bash的扩展实现说明"
                ftMain -ft
                echo
                ftMain -hb
                break;;
    -hb )
                ftEcho -s "bash内建命令和xbash扩展封装说明" ; 
                echo -e "=========================================================\n命令                 说明\n========================================================="
                ftReadAllAlias| column -t
                break;;
    -ft )
                ftEcho -s "对bash的扩展实现说明" ;
                echo -e "=========================================================\n命令                                 说明\n========================================================="
                ftReadAllFt | column -t
                break;;
    *)
                ftEcho -s " xc -h    #查看所有说明\n xc -hb   #bash内建命令和xbash扩展封装说明\n xc -ft   #对bash的扩展实现说明"
    return;; esac;done
}

complete -W "-a --adb -h -j -s" ftResetXbash
ftResetXbash()
{
    local ftEffect=更新xbash配置
    local isEnable=true

    while true; do case "$1" in
    -h | --help) echo -e "\
#===================[   ${ftEffect}   ]的使用示例==============
#    以下[参数对]无先后顺序可任意组合
#
#   查看说明
#    ftResetXbash -h 
#
#   更新xbash配置
#    ftResetXbash
#
#   更新xbash配置,同时更新jdk配置
#    ftResetXbash -j 
#
#   更新xbash配置,同时更新gcc配置
#    ftResetXbash -c 
#
#   更新adb服务
#    ftResetXbash -a
#    ftResetXbash --adb
#
#   更新xbash配置,同时更新android sdk 默认版本为 xxx
#    ftResetXbash -s xxx
#========================================================="; return ;;
    * ) break;;esac;done

    #可用性校验
    [[ "$isEnable" != "true" ]] && ftEcho -s "${ftEffect} 已被禁用，请确认" && return
    #参数解析
    export isResetJdk=
    export isResetGcc=
    export isResetXbash=true
    local arg ; local arg2 ; local index ; for ((i=1;i<=$#;i++)) ; do  eval value=\${${i}} ; arg=${value} ; ((index=i+1)) ; eval value2=\${${index}} ; arg2=${value2} ; case "${arg}" in
        -a |--adb) ftRestartAdb && return
          ;;
        -j ) export isResetJdk=true
          ;;
        -c ) export isResetGcc=true
          ;;
        -s ) export sdkVersionDefault="${arg2}"
          ;;
    * ) [[ -z "${arg}" ]] && break  ;; esac;done

    #实现主体
    # source ~/.bashrc
    source $filePathHomeBash
    export isResetXbash=
}

ftReadAllAlias()
{
        local ftEffect=显示bash内建等命令封装说明
        local isEnable=def

        [[ ! -f $filePathXbashTragetBashrcBase ]] && ftEcho -e "xbash配置不存在:$filePathXbashTragetBashrcBase" && return

        local cmdName=
        local cmdContent=
        cat $filePathXbashTragetBashrcBase|grep alias | sort | while read line; do
                cmdName=$(echo $line | awk '{split($2,b,"=");print  b[1] }')
                cmdContent=$(echo $line | awk '{split($2,b,"=");print  b[3]}'| awk '{split($0,b,";");print  b[1]}')
                [[ -n "$cmdContent" ]] && printf "%14s  " $cmdName;echo $cmdContent
        done
}

ftReadAllFt()
{
        local ftEffect=查看对bash的扩展实现说明
        local isEnable=def #设为 def 时将不在说明中显示

        local key="local ftEffect="
        local keyEnable="local isEnable="
        local effectDescription=
        local effectDescriptionEnable=
        for effectName in $(cat $rFilePathXbashModuleCommon $rFilePathXbashModuleAuto | grep '^ft' | sort) ; do
            effectDescription=$(cat $rFilePathXbashModuleCommon $rFilePathXbashModuleAuto|grep  -C 3 $effectName|grep "$key")
            effectDescription=${effectDescription//$key/}
            effectDescription=${effectDescription// /}

            effectDescriptionEnable=$(cat $rFilePathXbashModuleCommon $rFilePathXbashModuleAuto|grep  -C 3 $effectName|grep "$keyEnable")
            effectDescriptionEnable=${effectDescriptionEnable//$keyEnable/}
            effectDescriptionEnable=${effectDescriptionEnable// /}

            [[ "$effectDescriptionEnable" = "def" ]]&&continue

            printf "%40s  " ${effectName//()/}
            [[ "$effectDescriptionEnable" = "true" ]] && echo ${effectDescription} || ftEcho -s "[暂时关闭]"
        done
}

ftTest()
{
    local ftEffect=函数demo调试
    local isEnable=def

    while true; do case "$1" in
    -h | --help) echo -e "\
#===================[   ${ftEffect}   ]的使用示例==============
#    ftTest 任意参数
#========================================================="; return ;;
    * ) break;;esac;done

    #耦合校验
    if [[ ! -f "$rFilePathXbashModuleTest" ]]&&[[ -f $rFilePathXbashModuleTestExpmale ]]; then
       cp $rFilePathXbashModuleTestExpmale $rFilePathXbashModuleTest
       echo $userPassword | sudo -p '' -S chmod a+x $rFilePathXbashModuleTest
       echo $(echo $rFilePathXbashModuleTest | sed -e "s:${rDirPathXbash}/::g") >> ${rDirPathXbash}/.gitignore
    fi
    local valCount=1
    local errorContent=
    [ ! -d "$rDirPathUserHome" ] && errorContent="${errorContent}\\n[用户路径为空]rDirPathUserHome=$rDirPathUserHome"
    [ ! -f "$rFilePathXbashModuleTest" ] && errorContent="${errorContent}\\n[测试模块不存在]filePathXbashModuleTest=$rFilePathXbashModuleTest"
    [ -n "$errorContent" ] && ftEcho -ea "函数[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftTest -h && return

    #实现主体
    local dirPathLocal=$PWD
    local dirPathTemp=${rDirPathUserHome}/temp

    [[ ! -f ${dirPathLocal}/Makefile ]]&&[[ -z "$ANDROID_BUILD_TOP" ]] && cd $dirPathTemp && trap '[ -d $dirPathLocal ] && cd $dirPathLocal && dirPathLocal= && exit' SIGINT

    ftTimeConsuming -i
    shift&&$rFilePathXbashModuleTest "$@"
    ftTimeConsuming
    cd $dirPathLocal
    trap SIGINT
}

ftEcho()
{
    local ftEffect=工具信息提示
    local isEnable=def

    while true; do case "$1" in
    -h | --help) echo -e "\
#===================[   ${ftEffect}   ]的使用示例==============
#    ftEcho            内容    # 直接显示内容
#    ftEcho    -b     内容    # 标题，不换行，对字符串的缩进敏感
#    ftEcho    -bh   内容    # 标题，换行，对字符串的缩进敏感
#    ftEcho    -e     内容    # 错误信息显示，对字符串的缩进敏感
#    ftEcho    -ex   内容    # 错误信息显示，显示完退出，对字符串的缩进敏感
#    ftEcho    -ea   内容    # 错误信息多行显示，对字符串的缩进不敏感,包含内置数组会显示不正常
#    ftEcho    -eax 内容    # 错误信息多行显示，对字符串的缩进不敏感,包含内置数组会显示不正常，显示完退出
#    ftEcho    -y     内容    # 特定信息显示,y/n，对字符串的缩进敏感
#    ftEcho    -s     内容    # 执行信息，对字符串的缩进敏感
#    ftEcho    -sn   内容    # 执行信息,不换行，对字符串的缩进敏感
#========================================================="; return ;;
    * ) break;;esac;done
    
    local content
    local option=$1
    option=${option:-'未制定显示信息'}
    local valList=$@
    if [ ${#valList[@]} -eq 2 ];then
        content=$(echo $content |sed s/[[:space:]]//g)
    else
        #除第一个参数外的所有参数列表，可正常打印数组
        content="${valList[@]/$option/}"
        content=${content/ /}
    fi
    while true; do case $option in
        -e )      echo -e "\033[1;31m$content\033[0m"; break;;
        -ex )    echo -e "\033[1;31m$content\033[0m" ; [ "$XMODULE" = "env" ] && return ; exit;;
        -s )       echo -e "\033[1;33m$content\033[0m"; break;;
        -sn )     echo -en "\033[1;33m$content\033[0m"; break;;
        -sh )     echo;echo -e "\033[1;33m$content\033[0m";echo; break;;
        -b )       echo -e "\e[41;33;1m =========== $content ============= \e[0m"; break;;
        -bh )    echo;echo -e "\e[41;33;1m =========== $content ============= \e[0m";echo; break;;
        -y )       echo;echo -en "${content}[y/n]"; break;;
        -ye )     echo -en "${content}[y/n]"; break;;
        -r )        echo;echo -en "${content}"; break;;
        -ea )      for val in ${content[@]} ; do echo -e "\033[1;31m$val\033[0m"; done; break;;
        -eax )   for val in ${content[@]} ; do echo -e "\033[1;31m$val\033[0m"; done; exit;;
    * )    echo $option ;break;; esac ;done
}

ftTimeConsuming()
{
    local ftEffect=脚本操作耗时记录
    local isEnable=def

    [ -z "$mTimingStart" ]||[ "$1" = "-i" ] && mTimingStart=$(date +%s -d $(date +"%H:%M:%S")) && return 0

    local content=
    local timeNow=$(date +%s -d $(date +"%H:%M:%S"))
    local time3=$(((timeNow-mTimingStart)%60))
    local time5=$(((timeNow-mTimingStart)/3600))
    local time4=$((((timeNow-mTimingStart)-time5*3600)/60))
    mTimingStart=

    (($time3==0)) && (($time4==0)) && (($time5==0)) && return
    (($time5!=0)) && content="${content}${time5}时"
    (($time4!=0)) && content="${content}${time4}分"
    (($time3!=0)) && content="${content}${time3}秒"
    ftEcho -s "本技能耗时${content}  !"
}

ftPath()
{
    local ftEffect=路径处理
    local isEnable=def

    local dirPath=$1
    local fileName=$2
    if [[ "$1" = "-s" ]]; then
        local isEchoExceptionInfo=true
        dirPath=$2
        fileName=$3
    fi

    while true; do case "$1" in
    -h | --help) echo -e "\
#===================[   ${ftEffect}   ]的使用示例==============
#    ftPath 路径       #去掉最后的斜杠
#    ftPath 路径 文件  #正确拼接路径
#    ftPath -s 路径 文件  #正确拼接路径，显示错误提示
#========================================================="; return ;;
    * ) break;;esac;done

    #耦合校验
    local valCount=3
    local errorContent=
    (( $#>$valCount )) && errorContent="${errorContent}\\n参数默认有${valCount}个,当前为$#个"
    [ -z "$dirPath" ] && errorContent="${errorContent}\\n[路径字串不能为空]dirPath=$dirPath"
    [ -n "$errorContent" ] && [ -z "$isEchoExceptionInfo" ] && return
    [ -n "$errorContent" ] && ftEcho -ea "函数[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftPath -h && return

    #实现主体
    [[ "${dirPath: -1}" = "/" ]] && dirPath=${dirPath%/*}
    [[ -z "$fileName" ]] && echo $dirPath || echo ${dirPath}/${fileName}
}

#版本号大小对比
ftVersionComparison()
{
    local ftEffect=版本号大小对比
    local isEnable=def

    local isEnable=true

    while true; do case "$1" in
    -h | --help) echo -e "\
#===================[   ${ftEffect}   ]的使用示例==============
#    ftVersionComparison -h    #查看帮助
#
#    只能比对xx.xx格式的版本号
#    echo \$(ftVersionComparison 版本1 版本2)   #比对版本1和2大小
#========================================================="; return ;;
    * ) break;;esac;done

    #可用性校验
    [ "$isEnable" != "true" ]&&  ftEcho -s "${ftEffect} 已被禁用，请确认" && return
    #耦合校验
    local valCount=2
    local errorContent=
    (( $#!=$valCount )) && errorContent="${errorContent}\\n参数默认有${valCount}个,当前为$#个" 
    [ -n "$errorContent" ] && ftEcho -ea "函数[${ftEffect}]的参数错误${errorContent}\\n请查看下面说明:" && ftVersionComparison -h && return

    #实现主体
    [[ "$(echo "$@" | tr " " "\n" | sort -V | head -n 1)" != "$1" ]] && echo ">" && return
    [[ "$(echo "$@" | tr " " "\n" | sort -rV | head -n 1)" != "$1" ]] && echo "<" && return
    [[ "$(echo "$@" | tr " " "\n" | sort -V | head -n 1)" == "$1" ]] && echo "<=" && return
    [[ "$(echo "$@" | tr " " "\n" | sort -rV | head -n 1)" == "$1" ]] && echo ">=" && return
}