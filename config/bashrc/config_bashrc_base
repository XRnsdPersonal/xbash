#! /bin/bash
#--------------------------终端自身设定---------------------------
#终端提示
export PS1='xrnsd\[\033[44m\][\w]\[\033[0m\]:'
# 忽略重复命令
export HISTCONTROL=erasedups
# 忽略特定命令
export HISTIGNORE="[   ]*:ls:ll:cd:vi:pwd:sync:exit:history*"
# 命令历史文件大小
export HISTFILESIZE=10000000000
# 保存历史命令条数
export HISTSIZE=10000
# 以追加的方式保存命令历史
shopt -s histappend
export PROMPT_COMMAND="history -a"

#---------------- 自动整理bash历史记录  ----------------------------------
filePathBashHistory=${dirPathHome}/.bash_history
filePathBashHistoryTemp=${filePathBashHistory}_temp
filePathBashHistoryArchive=${filePathBashHistory}_archive
filePathBashHistoryArchiveTemp=${filePathBashHistoryArchive}_temp

lineCountMax=1000
lineCount=$(wc -l < $filePathBashHistory)
if (($lineCount > $lineCountMax)); then
    prune_lines=$(($lineCount - $lineCountMax))
    head -$prune_lines $filePathBashHistory >> $filePathBashHistoryArchive \
    && sort -k2n $filePathBashHistoryArchive | awk '{if ($0!=line) print;line=$0}' >${filePathBashHistoryArchiveTemp} \
    && mv $filePathBashHistoryArchiveTemp $filePathBashHistoryArchive \
    && sed -e "1,${prune_lines}d"  $filePathBashHistory > $filePathBashHistoryTemp \
    && mv $filePathBashHistoryTemp  $filePathBashHistory
fi

#----------------	部分环境变量	---------------------------
export ANDROID_SDK=${dirPathHomeTools}/sdk
export ANDROID_SDK_HOME=$ANDROID_SDK
export ANDROID_NDK=${dirPathHomeTools}/ndk/android-ndk-r10c
export LD_LIBRARY_PATH=${dirPathHomeTools}/sp_flash_tool_v5.1548:${dirPathHomeTools}/sp_flash_tool_v5.1548/lib:$LD_LIBRARY_PATH
export PATH=${JAVA_HOME}/bin:${JRE_HOME}/bin:/usr/local/cuda-7.5/bin:$ANDROID_SDK/platform-tools:$ANDROID_SDK/tools:$ANDROID_NDK:/usr/local/cuda-8.0/bin/:$PATH
#缓存目录[android优化加速部分]
export CCACHE_DIR=/media/data/.ccache

#--------------------------环境检测---------------------------
if [ ! -d "$JAVA_HOME" ];then
	echo -e "\033[1;31mJava_环境配置错误\n$JAVA_HOME不存在\n\033[0m"
fi
if [ ! -d "$ANDROID_SDK" ];then
	echo -e "\033[1;31mAndroid_SDK_环境配置错误\n$ANDROID_SDK 不存在\n\033[0m"
else
	alias .9='export XCMD=.9;${dirPathHome}/tools/sdk/5.1/tools/draw9patch'
fi
if [ ! -d "$ANDROID_NDK" ];then
	echo -e "\033[1;31mAndroid_NDK_环境配置错误\n$ANDROID_NDK 不存在\033[0m"
fi

fileNameXbashTragetConfigBase=config_base
filePathXbashTragetConfigBase=${dirPathHomeCmdConfig}/${fileNameXbashTragetConfigBase}
#全局变量
if [ -f $filePathXbashTragetConfigBase ];then
	#不重复添加config_base的只读设定
	if [ -z "$rNameUser" ];then
		source  $filePathXbashTragetConfigBase
	fi
	# 函数
	if [ -f ${rDirPathCmdsModule}/${rFileNameCmdModuleTools} ];then
		source  ${rDirPathCmdsModule}/${rFileNameCmdModuleTools}
		
		ftLog
		
		#命令封装
		alias xb='export XCMD=xb;${dirPathHomeCmd}/main.sh'
		alias xk='export XCMD=xk;${dirPathHomeCmd}/main.sh'
		alias xc='export XCMD=xc;${dirPathHomeCmd}/main.sh'
		alias xu='export XCMD=xu;gedit ${dirPathHomeCmdConfig}/config_bashrc_base \
						${dirPathHomeCmdConfig}/config_bashrc_base.gonre'
		alias xh='export XCMD=xh;${dirPathHomeCmd}/main.sh -h $2'
		alias xss='export XCMD=xss;${dirPathHomeCmd}/main.sh reboot'
		alias xs='export XCMD=xs;${dirPathHomeCmd}/main.sh shutdown'
		alias xd='export XCMD=xd;${dirPathHomeCmd}/main.sh mtk_flashtool'
		alias xi='export XCMD=xi;. ${dirPathHomeCmd}/${rFileNameCmdModuleCompile}'
		alias xt='export XCMD=xt;python ${dirPathHomeCmd}/module/test/pytools.py $2'

		#命令选项快速适配
		complete -W "compile" xi
		complete -W "backup restore" xb
		complete -W "systemui monkey launcher" xk
		complete -W "restartadb help gjh test clean_data_garbage vvv bootanim pac -v -vvv -ft -ftall" xc

	else
		echo -e "\033[1;31mXbash函数加载失败[ToolsPath=${rDirPathCmdsModule}/${rFileNameCmdModuleTools}]\033[0m"
	fi
else
	echo -e "\033[1;31mXbash全局变量加载失败[filePathXbashTragetConfigBase=$filePathXbashTragetConfigBase]\033[0m"
fi
# 标记为环境模式，此模式说明直接调用脚本实现
export  XMODULE="env"

#--------------------------命令封装---------------------------
alias ..="cd .."
alias ...="cd ../.."
alias xr="source ~/.bashrc"
alias xgl='export XCMD=xgl;\
	ftLog;\
	git log --pretty=oneline -10 2>&1|tee -a $mFilePathLog'
alias xp="export XCMD=xp;readlink -f"
alias xl='export XCMD=xl;\
	ftLog;\
	adb logcat -c;adb logcat | grep $2 2>&1|tee -a $mFilePathLog'
alias xle='export XCMD=xle;\
	ftLog;\
	adb logcat -c;adb logcat "*:E" 2>&1|tee -a $mFilePathLog'
alias xbh='export XCMD=xbh;cat $filePathBashHistory $filePathBashHistoryArchive |grep $2'
alias xkd='export XCMD=xkd;mkdir empty;rsync --delete-before -d -a -H -v --progress --stats empty $2;rm -r empty'
alias xversion='cat packages/apps/Settings/src/com/android/settings/DeviceInfoSettings.java|grep "custom_build_version";\
		cat packages/apps/Settings/src/com/android/settings/DeviceInfoSettings.java|grep "KEY_BUILD_NUMBER";\
		cat packages/apps/ValidationTools/src/com/sprd/validationtools/itemstest/SystemVersionTest.java|grep -C 1 "platformVersion.setText(getString(R.string.build_number)"'

alias xkk='cat packages/apps/Dialer/src/com/android/dialer/SpecialCharSequenceMgr.java|grep "MMI_SAM_FACTORYMODE";\
		cat packages/apps/Dialer/src/com/android/dialer/SpecialCharSequenceMgr.java|grep "TESTMODE_LIST";\
		cat packages/apps/Dialer/src/com/android/dialer/SpecialCharSequenceMgr.java|grep "VERALION"'

alias xqcamera='adb shell am start -n com.android.camera2/com.android.camera.CameraActivity'
alias xqselect='adb shell am start -n com.mtk.select/com.mtk.select.SelectActivity'

#--------------------------命令选项快速适配---------------------------
complete -W "123" xl
complete -W "123" xle
complete -W "edl_auto=packet_upload EDL_ATUO_PACKET=true" make

#-------------------------android优化加速部分------------------
#编译加速 c/c++ 部分
export USE_CCACHE=1
export CACHE_UMASK=002
unset CCACHE_HARDLINK
#分布式编译集群的IP组
#export DISTCC_HOSTS="192.168.3.114"
