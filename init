#!/bin/bash
#####-----------------------变量初始化-----------------------#########
exceptionContent=
userPasswdLocal=
diaNameLocal="xbash"
dirPathLocal=$(cd "$(dirname "$0")";pwd)
[[ -z "$SUDO_USER" ]] && userNameLocal=$USER || userNameLocal=$SUDO_USER
dirPathHomeLocal=/home/${userNameLocal}
#####-----------------------公共方法-----------------------#########
ftEcho()
{
    if [ "$1" = "-s" ];then
        echo -e "\033[1;33m${2}\033[0m"
    elif [ "$1" = "-e" ];then
        echo -e "\033[1;31m${2}\033[0m"
    elif [ "$1" = "-y" ];then
        local titleContent="${2}"
        local cmdContent="${3}"
        local cmdContentNew="${4}"
        ftEcho -y "${titleContent}(回车默认y)"
        read -n 1 sel
        [ -z "${sel}" ] && sel=y
        while true; do case "$sel" in
                y | Y )  eval ${cmdContentNew};break;;
                n | q )  eval ${cmdContent};break;;
                * ) echo "错误的选择：${sel},输入n，q，离开";;
        esac;done
        echo
    fi
}

ftInitGitConfig()
{
    # 变量初始化
    [[ -z "$userPasswdLocal" ]] && ftinitUserPassword

    if [[ -z $(which git) ]];then
        echo $userPasswdLocal | sudo -p '' -S apt-get install  git ||(ftEcho -e "git安装失败，请重新安装" ;exit)
    fi

    if [[ -z $(which git) ]];then
        ftEcho -e "git没有安装，请手动安装"
        return
    fi

    filePathGitConfig=/home/${userNameLocal}/.gitconfig
    if [ ! -f "$filePathGitConfig" ];then
        echo -en "请输入git用户名:"
        read gitName&&git config --global user.name "$gitName"
        echo -en "请输入git邮箱或联系方式:"
        read gitemailUrl&&git config --global user.email "$gitemailUrl"
        ftEcho -s "已自动初始化gitconfig,需要修改的请查看$filePathGitConfig"

        #切换到独立分支
        local brachName="${userNameLocal}_$(date -d "today" +"%y%m%d%H%M%S")"
        brachName=$(echo $brachName |sed s/[[:space:]]//g)
        git checkout ${brachName}
    fi||exceptionContent="${exceptionContent}\n git配置初始化失败"
}

ftInitUserConfig()
{
    # 变量初始化
    [[ -z "$userPasswdLocal" ]] && ftinitUserPassword

    local dirPathXbashConfigBashrc=${dirPathLocal}/config
    local dirPathXbashConfigBashrcUser=${dirPathXbashConfigBashrc}/user
    local filePathXbashConfigExample=${dirPathXbashConfigBashrc}/expmale.config
    local filePathXbashConfigNew=${dirPathXbashConfigBashrcUser}/${userNameLocal}.config

    [ ! -d "$dirPathXbashConfigBashrcUser" ] && mkdir $dirPathXbashConfigBashrcUser
    if [[ -f "$filePathXbashConfigExample" ]] && [ ! -f $filePathXbashConfigNew ]; then
        cp $filePathXbashConfigExample $filePathXbashConfigNew

        if [ -n "${userPasswdLocal}" ];then
            local taguserPasswordBase="export\ userPassword="
            local taguserPasswordNew="export\ userPassword=$userPasswdLocal"
            sed -i "s:$taguserPasswordBase:$taguserPasswordNew:g" $filePathXbashConfigNew||exceptionContent="${exceptionContent}\n xbash的用户信息配置初始化失败" 
        fi

        local tagisUseCustomPS1Base="export\ isUseCustomPS1="
        ftEcho -y "是否启用xbash定义bash的命令行前缀" "tagisUseCustomPS1New=" "tagisUseCustomPS1New=\"export\ isUseCustomPS1=true\""
        if [ -n "${tagisUseCustomPS1New}" ];then
            sed -i "s:$tagisUseCustomPS1Base:$tagisUseCustomPS1New:g" $filePathXbashConfigNew||\
            exceptionContent="${exceptionContent}\n xbash定义bash的命令行前缀启用失败"
        fi

        local tagisUseXbashHistoryBase="export\ isUseXbashHistory="
        ftEcho -y "是否启用xbash定义的bash历史记录处理" "tagisUseXbashHistoryNew=" "tagisUseXbashHistoryNew=\"export\ isUseXbashHistory=true\""
        if [ -n "${tagisUseXbashHistoryNew}" ];then
            sed -i "s:$tagisUseXbashHistoryBase:$tagisUseXbashHistoryNew:g" $filePathXbashConfigNew && export isUseXbashHistory=true||\
            exceptionContent="${exceptionContent}\n xbash定义的bash历史记录处理启用失败"
        fi

        local tagisUseCustomAndroidDevEnvConfigBase="export\ isUseCustomAndroidDevEnvConfig="
        ftEcho -y "是否启用xbash定义的Android开发环境基础配置" "tagisUseCustomAndroidDevEnvConfigNew=" "tagisUseCustomAndroidDevEnvConfigNew=\"export\ isUseCustomAndroidDevEnvConfig=true\""
        if [ -n "${tagisUseCustomAndroidDevEnvConfigNew}" ];then
            sed -i "s:$tagisUseCustomAndroidDevEnvConfigBase:$tagisUseCustomAndroidDevEnvConfigNew:g" $filePathXbashConfigNew||\
            exceptionContent="${exceptionContent}\n xbash定义的Android开发环境配置启用失败" 
        fi

        local tagisUseBuildCcacheBase="isUseBuildCcache="
        ftEcho -y "是否启用xbash定义的Android编译缓存配置" "tagisUseBuildCcacheNew=" "tagisUseBuildCcacheNew=\"isUseBuildCcache=true\""
        if [ -n "${tagisUseBuildCcacheNew}" ];then
            sed -i "s:$tagisUseBuildCcacheBase:$tagisUseBuildCcacheNew:g" $filePathXbashConfigNew||\
            exceptionContent="${exceptionContent}\n xbash定义的Android编译缓存配置启用失败" 
        fi

        # local tagisUseDistccBase="isUseDistcc="
        # ftEcho -y "是否启用xbash定义的Android分布式编译配置" "tagisUseDistccNew=" "tagisUseDistccNew=\"isUseDistcc=true\""
        # if [ -n "${tagisUseDistccNew}" ];then
        #     sed -i "s:$tagisUseDistccBase:$tagisUseDistccNew:g" $filePathXbashConfigNew||\
        #     exceptionContent="${exceptionContent}\n xbash定义的Android分布式编译配置启用失败" 
        # fi
    else
        exceptionContent="${exceptionContent}\n xbash的用户信息配置初始化失败"
    fi
}

ftInitMoule()
{
    local filePathXbashModuleBashrcNew=${dirPathLocal}/main
    local filePathHomeLocalBashrc=${dirPathHomeLocal}/.bashrc
    local dirPathXbashModuleUser=${dirPathLocal}/module/user
    local filePathXbashModuleUser=${dirPathXbashModuleUser}/${userNameLocal}.module
    local dirPathLocal=$(pwd)

    [ ! -d "$dirPathXbashModuleUser" ] && mkdir -p $dirPathXbashModuleUser
    [ ! -f "$filePathXbashModuleUser" ] && echo "#! /bin/bash" > $filePathXbashModuleUser
    if [ -f "$filePathXbashModuleBashrcNew" ]; then
        cd $dirPathHomeLocal
        [[ -f "$filePathHomeLocalBashrc" ]] && [ $(readlink -f  $filePathHomeLocalBashrc) != $filePathXbashModuleBashrcNew ] && mv ${filePathHomeLocalBashrc} ${filePathHomeLocalBashrc}_backup
        ln -s $filePathXbashModuleBashrcNew .bashrc || exceptionContent="${exceptionContent}\n xbash生效初始化失败"
    else
        exceptionContent="${exceptionContent}\n xbash生效初始化失败,文件不存在:${filePathXbashModuleBashrcNew}"
    fi
    cd $dirPathLocal
}

ftInitInputrc()
{
    local fileNameXbashModuleBashrcInputrcTraget=.inputrc
    local filePathXbashModuleBashrcInputrc=${dirPathLocal}/module/base/bash_input.module
    local filePathHomeLocalConfigInputrc=${dirPathHomeLocal}/${fileNameXbashModuleBashrcInputrcTraget}
    local dirPathLocal=$(pwd)

    [ -z "${isUseXbashHistory}" ] && return
    [[ !  -f "$filePathXbashModuleBashrcInputrc" ]] && exceptionContent="${exceptionContent}\n xbash配置的命令历史适配逻辑初始化失败" && return

    cd $dirPathHomeLocal

    [[ -f "$filePathHomeLocalConfigInputrc" ]] && [ $(readlink -f  $filePathHomeLocalConfigInputrc) != $filePathXbashModuleBashrcInputrc ] &&\
        mv ${filePathHomeLocalConfigInputrc} ${filePathHomeLocalConfigInputrc}_backup
    ln -s $filePathXbashModuleBashrcInputrc $fileNameXbashModuleBashrcInputrcTraget

    cd $dirPathLocal
}

ftinitUserPassword()
{
        userPasswdLocal=def_null
        local status=1
        stty -echo
        while [[ status -ne "0" ]]; do
            if [[ $userPasswdLocal != "def_null" ]]; then
                echo -e "\033[1;31m密码错误,请重新输入\033[0m";
            fi
            echo -en "请输入用户[$userNameLocal]对应的密码:"
            read -s userPasswdLocal
            echo $userPasswdLocal | sudo -p '' -S echo 2> /dev/null
            status=$?
        done||exceptionContent=" 用户信息配置初始化失败"
        stty echo
}

ftInitXbash()
{
    local ftEffect=初始化xbash
    local isEnable=true

    while true; do case "$1" in
    -h | --help) ftEcho -sn "${ftEffect} " ; echo 的使用示例 ; echo -e "\
#=========================================================
#
#    ./init                            #初始化xbash所有配置
#    ./init --git                     #初始化xbash使用的git配置
#    ./init --userconfig        #初始化xbash的用户配置
#    ./init --module             #初始化xbash的module配置
#    ./init --inputrc              #初始化xbash的命令历史查找配置
#========================================================="; return ;;
    * ) break;;esac;done

    #可用性校验
    [[ "$isEnable" = "false" ]] && ftEcho -s "${ftEffect} 已被禁用，请确认" && return
    #解参验耦
    if [[ -z "$1" ]];then #初始化所有配置
        # 变量初始化
        [[ -z "$userPasswdLocal" ]] && ftinitUserPassword
 
        #配置初始化
        ftInitGitConfig
        ftInitUserConfig
        ftInitMoule
        ftInitInputrc

        #结果显示
        [[ -z "$exceptionContent" ]] && ftEcho -s "Xbash 初始化成功 " || ftEcho -e "${exceptionContent}"
        return
    fi
    #根据参数初始化
    local index arg arg2
    for ((i=1;i<=$#;i++)) ; do eval arg=\${${i}} ; ((index=i+1)) ; eval arg2=\${${index}}
    case "${arg}" in
        --git )ftInitGitConfig
                return ;;
        --userconfig )ftInitUserConfig
                return ;;
        --module )ftInitMoule
                return ;;
        --inputrc )ftInitInputrc
                return ;;
    * ) [[ -z "${arg}" ]] && break  ;; esac;done
}

#####-----------------------开始初始化-----------------------#########
ftInitXbash $@