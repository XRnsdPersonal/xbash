#!/bin/bash
#####-----------------------变量初始化-----------------------#########
exceptionContent=
# 获取xbash所在目录 获取用户名,用户名对应密码
# 根据 config/example.config 新建 config/用户名.config，在.gitignore中插入记录
# 根据 module/bashrc/example.bashrc 新建 module/bashrc用户名.bashrc ，在.gitignore中插入记录

isFail=
diaNameLocal="xbash"
dirPathLocal=$(cd "$(dirname "$0")";pwd)

[[ -z "$SUDO_USER" ]] && userNameLocal=$USER || userNameLocal=$SUDO_USER
dirPathHomeLocal=/home/${userNameLocal}

userPasswdLocal=def_null
status=1
stty -echo
while [[ status -ne "0" ]]; do
    if [[ $userPasswdLocal != "def_null" ]]; then
        echo -e "\033[1;31m密码错误,请重新输入\033[0m";
    fi
    echo -en "请输入用户[$userNameLocal]对应的密码:"
    read -s userPasswdLocal
    echo $userPasswdLocal | sudo -p '' -S echo 2> /dev/null
    status=$?
done||exceptionContent=" 用户信息配置初始化失败"
stty echo
#####-----------------------公共方法-----------------------#########
ftEcho()
{
    if [ "$1" = "-s" ];then
        echo -e "\033[1;33m${2}\033[0m"
    elif [ "$1" = "-e" ];then
        echo -e "\033[1;31m${2}\033[0m"
    elif [ "$1" = "-y" ];then
        local titleContent="${2}"
        local cmdContent="${3}"
        local cmdContentNew="${4}"
        echo -n "${titleContent}[y/n](回车默认y)"
        read -n 1 sel
        [ ${#sel} == 0 ] && sel=y
        while true; do case "$sel" in
                y | Y )  eval ${cmdContentNew};break;;
                n | q )  eval ${cmdContent};break;;
                * ) echo "错误的选择：${sel},输入n，q，离开";;
        esac;done
        echo
    fi
      
}

ftInitGitConfig()
{
    if [ -z $(which git) ];then
        echo $userPasswdLocal | sudo -p '' -S apt-get install  git ||(ftEcho -e "git安装失败，请重新安装" ;exit)
    fi

    if [ -z $(which git) ];then
        ftEcho -e "git没有安装，请手动安装"
        return
    fi
    
    filePathGitConfig=/home/${userNameLocal}/.gitconfig
    if [ ! -f "$filePathGitConfig" ];then
        echo -en "请输入git用户名:"
        read gitName&&git config --global user.name "$gitName"
        echo -en "请输入git邮箱或联系方式:"
        read gitemailUrl&&git config --global user.email "$gitemailUrl"
        ftEcho -s "已自动初始化gitconfig,需要修改的请查看$filePathGitConfig"
    fi||exceptionContent="${exceptionContent}\n git配置初始化失败"
}


ftInitUserConfig()
{
    local dirPathXbashConfigBashrc=${dirPathLocal}/config
    local dirPathXbashConfigBashrcUser=${dirPathXbashConfigBashrc}/user
    local filePathXbashConfigExample=${dirPathXbashConfigBashrc}/expmale.config
    local filePathXbashConfigNew=${dirPathXbashConfigBashrcUser}/${userNameLocal}.config

    [ ! -d "$dirPathXbashConfigBashrcUser" ] && mkdir $dirPathXbashConfigBashrcUser
    if [[ -f "$filePathXbashConfigExample" ]]&&[ ! -f $filePathXbashConfigNew ]; then
        cp $filePathXbashConfigExample $filePathXbashConfigNew

        if [ ! -z "${userPasswdLocal}" ];then
            local taguserPasswordBase="export\ userPassword="
            local taguserPasswordNew="export\ userPassword=$userPasswdLocal"
            sed -i "s:$taguserPasswordBase:$taguserPasswordNew:g" $filePathXbashConfigNew||exceptionContent="${exceptionContent}\n xbash的用户信息配置初始化失败" 
        fi

        local tagisUseCustomPS1Base="isUseCustomPS1="
        ftEcho -y "是否启用xbash定义bash的命令行前缀" "tagisUseCustomPS1New=" "tagisUseCustomPS1New=\"isUseCustomPS1=true\""
        if [ ! -z "${tagisUseCustomPS1New}" ];then
            sed -i "s:$tagisUseCustomPS1Base:$tagisUseCustomPS1New:g" $filePathXbashConfigNew||\
            exceptionContent="${exceptionContent}\n xbash定义bash的命令行前缀启用失败"
        fi

        local tagisUseCustomAndroidDevEnvConfigBase="isUseCustomAndroidDevEnvConfig="
        ftEcho -y "是否启用xbash定义的Android开发环境基础配置" "tagisUseCustomAndroidDevEnvConfigNew=" "tagisUseCustomAndroidDevEnvConfigNew=\"isUseCustomAndroidDevEnvConfig=true\""
        if [ ! -z "${tagisUseCustomAndroidDevEnvConfigNew}" ];then
            sed -i "s:$tagisUseCustomAndroidDevEnvConfigBase:$tagisUseCustomAndroidDevEnvConfigNew:g" $filePathXbashConfigNew||\
            exceptionContent="${exceptionContent}\n xbash定义的Android开发环境配置启用失败" 
        fi

        local tagisUseBuildCcacheBase="isUseBuildCcache="
        ftEcho -y "是否启用xbash定义的Android编译缓存配置" "tagisUseBuildCcacheNew=" "tagisUseBuildCcacheNew=\"isUseBuildCcache=true\""
        if [ ! -z "${tagisUseBuildCcacheNew}" ];then
            sed -i "s:$tagisUseBuildCcacheBase:$tagisUseBuildCcacheNew:g" $filePathXbashConfigNew||\
            exceptionContent="${exceptionContent}\n xbash定义的Android编译缓存配置启用失败" 
        fi

        local tagisUseDistccBase="isUseDistcc="
        ftEcho -y "是否启用xbash定义的Android分布式编译配置" "tagisUseDistccNew=" "tagisUseDistccNew=\"isUseDistcc=true\""
        if [ ! -z "${tagisUseDistccNew}" ];then
            sed -i "s:$tagisUseDistccBase:$tagisUseDistccNew:g" $filePathXbashConfigNew||\
            exceptionContent="${exceptionContent}\n xbash定义的Android分布式编译配置启用失败" 
        fi
    else
        exceptionContent="${exceptionContent}\n xbash的用户信息配置初始化失败"
    fi
}

ftInitMoule()
{
    local filePathXbashModuleBashrcNew=${dirPathLocal}/main
    local filePathHomeLocalBashrc=${dirPathHomeLocal}/.bashrc
    local dirPathXbashModuleUser=${dirPathLocal}/module/user
    local filePathXbashModuleUser=${dirPathXbashModuleUser}/${userNameLocal}.module
    local dirPathLocal=$(pwd)

    [ ! -d "$dirPathXbashModuleUser" ]&& mkdir -p $dirPathXbashModuleUser
    [ ! -f "$filePathXbashModuleUser" ]&&echo "#! /bin/bash" > $filePathXbashModuleUser
    if [ -f "$filePathXbashModuleBashrcNew" ]; then
        if [ $(readlink -f  $filePathHomeLocalBashrc) = $filePathHomeLocalBashrc ];then
            cd $dirPathHomeLocal
            mv ${filePathHomeLocalBashrc} ${filePathHomeLocalBashrc}_backup
            ln -s $filePathXbashModuleBashrcNew .bashrc || exceptionContent="${exceptionContent}\n xbash生效初始化失败"
        fi
    else
        exceptionContent="${exceptionContent}\n xbash生效初始化失败,文件不存在:${filePathXbashModuleBashrcNew}"
    fi
    cd $dirPathLocal
}

ftInitInputrc()
{
    local fileNameXbashModuleBashrcInputrcTraget=.inputrc
    local filePathXbashModuleBashrcInputrc=${dirPathLocal}/module/base/bash_input.module
    local filePathHomeLocalConfigInputrc=${dirPathHomeLocal}/${fileNameXbashModuleBashrcInputrcTraget}
    local dirPathLocal=$(pwd)
    if [[ -f "$filePathXbashModuleBashrcInputrc" ]]; then
        cd $dirPathHomeLocal
        [[ -f "$filePathHomeLocalConfigInputrc" ]] && mv ${filePathHomeLocalConfigInputrc} ${filePathHomeLocalConfigInputrc}_backup
        ln -s $filePathXbashModuleBashrcInputrc $fileNameXbashModuleBashrcInputrcTraget
    else
        exceptionContent="${exceptionContent}\n xbash配置的命令历史适配逻辑初始化失败"
    fi
    cd $dirPathLocal
}

#####-----------------------配置文件生成-----------------------#########
# git config
ftInitGitConfig
# config
ftInitUserConfig
# module
ftInitMoule
#.inputrc
ftInitInputrc

#####-----------------------初始化结果信息显示-----------------------#########
if [[ -z "$exceptionContent" ]]; then
    ftEcho -s "Xbash 初始化成功 "
else
    ftEcho -e "${exceptionContent}"
fi